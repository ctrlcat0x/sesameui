{
  "docs": [
    {
      "slug": "changelog",
      "title": "Changelog",
      "description": "",
      "content": "\r\n\r\n## 2025 June\r\n\r\n### New Component\r\n\r\n- <Link href=\"/docs/components/carousel/box-carousel\">Box Carousel</Link>\r\n\r\n### Updated components\r\n\r\nSome components have been updated with better a11y support, improved documentation, and bug fixes, but there are no breaking changes.\r\nThis is an ongoing effort which will continue in the future as well.\r\n\r\n## 2025 May\r\n\r\n### New Components\r\n\r\n- <Link href=\"/docs/components/text/text-highlighter\">Text Highlighter</Link>\r\n- <Link href=\"/docs/components/text/letter-3d-swap\">Letter 3D Swap</Link>\r\n- <Link href=\"/docs/components/image/image-trail\">Image Trail</Link>\r\n- <Link href=\"/docs/components/blocks/css-box\">CSS Box</Link>\r\n\r\n## 2025 Apr\r\n\r\n### New Components\r\n\r\n- <Link href=\"/docs/components/blocks/simple-marquee\">Simple Marquee</Link>\r\n- <Link href=\"/docs/components/blocks/marquee-along-svg-path\">Marquee Along SVG Path</Link>\r\n\r\n### Framer integration\r\n\r\nSome of the components are now compatible with Framer, thanks to the work of [Framer University](https://x.com/learnframer) & [Achille](https://x.com/achilleernlt).\r\n\r\nAvailable components for remixing:\r\n\r\n- <Link href=\"/docs/components/text/scramble-in\">Scramble In</Link>\r\n- <Link href=\"/docs/components/background/pixel-trail\">Pixel Trail</Link>\r\n- <Link href=\"/docs/components/physics/elastic-line\">Elastic Line</Link>\r\n- <Link href=\"/docs/components/physics/cursor-attractor-gravity\">Cursor Attractor & Gravity</Link>\r\n- <Link href=\"/docs/components/image/parallax-floating\">Parallax Floating</Link>\r\n- <Link href=\"/docs/components/blocks/circling-elements\">Circling Elements</Link>\r\n- <Link href=\"/docs/components/blocks/screensaver\">Screensaver</Link>\r\n\r\n## 2025 March\r\n\r\n### Tailwind v4 Migration 🎉\r\nWe've upgraded to Tailwind v4! This major version brings several important changes:\r\n\r\n**Breaking Changes:**\r\n- Configuration is now stored directly in `global.css` instead of `tailwind.config.ts`\r\n- The open-in-v0 feature currently doesn't support CSS variables - these need to be added manually\r\n- CLI installation behavior has changed: CSS variables won't automatically merge with `global.css` when using layers, so you need to add them manually for now. \r\n- Syntax changes for Tailwind classes and colors (see official [migration guide](https://tailwindcss.com/docs/upgrade-guide))\r\n\r\n**Affected Components:**\r\n- Circling Elements\r\n- Animated Gradient With SVG\r\n\r\n**Documentation Updates:**\r\n- Contribution guidelines have been updated to reflect v4 changes\r\n\r\nFor a complete overview of syntax changes and new features, please refer to the official [Tailwind v4 announcement](https://tailwindcss.com/blog/tailwindcss-v4#css-first-configuration)."
    },
    {
      "slug": "components/background/animated-gradient-svg",
      "title": "Animated Gradient With SVG",
      "description": "An animated multi-color gradient background effect with SVG elements.",
      "content": "\r\n\r\n<ComponentPreview name=\"animated-gradient-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/animated-gradient-with-svg.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nAdd this hook for querying the dimensions of an element:\r\n\r\n<ComponentSource name=\"use-dimensions\" />\r\n\r\nUpdate your `globals.css` file to include the animation keyframes:\r\n\r\n<CodeSnippet title=\"globals.css\">\r\n```css\r\n  /* ... */\r\n  @theme: {\r\n    --animate-background-gradient: background-gradient;\r\n    @keyframes: background-gradient {\r\n      0%, 100% {\r\n        transform: translate(0, 0);\r\n        animationDelay: var(--background-gradient-delay, 0s);\r\n      }\r\n      20% {\r\n        transform: translate(calc(100% * var(--tx-1, 1)), calc(100% * var(--ty-1, 1)));\r\n      }\r\n      40% {\r\n        transform: translate(calc(100% * var(--tx-2, -1)), calc(100% * var(--ty-2, 1)));\r\n      }\r\n      60% {\r\n        transform: translate(calc(100% * var(--tx-3, 1)), calc(100% * var(--ty-3, -1)));\r\n      }\r\n      80% {\r\n        transform: translate(calc(100% * var(--tx-4, -1)), calc(100% * var(--ty-4, -1)));\r\n      }     \r\n    }\r\n  },\r\n};\r\n```\r\n</CodeSnippet>\r\n\r\nThen, copy and paste the following code into your project:\r\n\r\n<ComponentSource name=\"animated-gradient-with-svg\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\nAnimated gradients can be achieved with many different techniques (shaders, CSS gradients, etc.), this component uses simple SVG circles with a blur filter to create the effect.\r\n\r\n1. For each color in the `colors` prop array, the component creates an SVG circle element\r\n2. Each circle is given a random initial position using percentage values\r\n3. The movement of each circle is controlled by 8 CSS variables that define target positions:\r\n   - `--tx-1` and `--ty-1` for the first position\r\n   - `--tx-2` and `--ty-2` for the second position\r\n   - And so on for positions 3 and 4\r\n4. These variables are set to random values between -0.5 and 0.5.\r\n\r\n<CodeSnippet title=\"Movement variables\">\r\n```tsx\r\nstyle={\r\n  {\r\n    //...\r\n    \"--tx-1\": (Math.random() - 0.5),\r\n    \"--ty-1\": (Math.random() - 0.5),\r\n    \"--tx-2\": (Math.random() - 0.5),\r\n    \"--ty-2\": (Math.random() - 0.5),\r\n    \"--tx-3\": (Math.random() - 0.5),\r\n    \"--ty-3\": (Math.random() - 0.5),\r\n    \"--tx-4\": (Math.random() - 0.5),\r\n    \"--ty-4\": (Math.random() - 0.5),\r\n  } as React.CSSProperties\r\n}\r\n```\r\n</CodeSnippet>\r\n\r\n5. The `background-gradient` animation keyframes are used to animate the circles between these positions\r\n6. Lastly, we blur the container element which holds the circles, to create a smooth effect.\r\n\r\nIf you would like to achieve a more complex animation, you have to edit the component directly, for example:\r\n\r\n1. Add more keyframe positions by increasing the number of `--tx` and `--ty` variables\r\n2. Use cubic-bezier timing functions to create non-linear movement\r\n3. Add rotation or scaling transforms\r\n\r\nand so on.\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        colors<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`string[]`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Array of color strings to be used in the gradient</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>speed</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`5`</TableCell>\r\n      <TableCell>\r\n        Speed of the animation (this is somewhat an arbitrary number, refer\r\n        tothe source code for more details)\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>blur</TableCell>\r\n      <TableCell>`\"light\" | \"medium\" | \"heavy\"`</TableCell>\r\n      <TableCell>`\"light\"`</TableCell>\r\n      <TableCell>Intensity of the blur effect</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/background/pixel-trail",
      "title": "Pixel Trail",
      "description": "A pixelated trail effect that recolors grid pixels as you move your cursor.",
      "content": "\r\n\r\n<ComponentPreview name=\"pixel-trail-demo\" framerLink=\"https://framer.university/resources/pixel-trail-effect-for-framer\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/pixel-trail.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nInstall the `uuid` package:\r\n\r\n<InstallTabs command=\"@types/uuid uuid\" />\r\n\r\nWe use the uuid package to generate a unique ID for each trail instance — so each trail will work without interfering with other effects.\r\n\r\nThen, copy and paste the component source code into your project:\r\n\r\n<ComponentSource name=\"pixel-trail\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nJust drop the `PixelTrail` component into your project, define a pixelSize, and pass the `pixelColor` prop. You can also pass a `className` prop to style the container, and a `pixelClassName` prop to style the individual pixels.\r\n\r\n## Examples\r\n\r\n### Without fading\r\n\r\nIf you set the `fadeDuration` prop to `0`, and increase the `delay` prop, you can create a trail effect that doesn't fade.\r\n\r\n<ComponentPreview name=\"pixel-trail-no-fade-demo\" />\r\n\r\n### Customizing the pixels\r\n\r\nYou can customize the individual pixels by passing a `pixelClassName` prop.\r\n\r\n<ComponentPreview name=\"pixel-trail-custom-pixel-demo\" />\r\n\r\n### Combining with SVG Filters\r\n\r\nThe following example combines the <Link href=\"/docs/components/filter/gooey-filter\">GooeyFilter</Link> component with the PixelTrail component to create a fluid interface. Unfortunately, the component doesn't support Safari, so you'll need to create a fallback for that.\r\n\r\n<ComponentPreview name=\"gooey-svg-filter-pixel-trail-demo\" />\r\n\r\n## Notes\r\n\r\n1. The component operates by dividing the container into a grid of pixels and dynamically recoloring them as you move your cursor. Each pixel is represented by a single div element, so perf may be impacted when using a large number of pixels, especially on the first render.\r\n\r\n2. Keep the z-index of the effect's container lower than the rest of your content, so the pointer-events will captured by all of your other elements.\r\n\r\n## Credits\r\n\r\nPorted to Framer by [Framer University](https://framer.university/)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>pixelSize</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`20`</TableCell>\r\n      <TableCell>Size of each pixel in pixels</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>fadeDuration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`500`</TableCell>\r\n      <TableCell>Duration of the fade animation in milliseconds</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>delay</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>\r\n        Delay before the fade animation starts in milliseconds\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>pixelClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>\r\n        Additional CSS classes for styling the individual pixels\r\n      </TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/blocks/circling-elements",
      "title": "Circling Elements",
      "description": "A component that creates a circling effect on its children.",
      "content": "\r\n\r\n<ComponentPreview name=\"circling-elements-demo\" framerLink=\"https://www.soyakil.fr/ressources/circling-images\" />\r\n\r\nInspiration from [Bakken & Bæck](https://www.instagram.com/p/DBG5fLdiN4Q/?img_index=1)\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/circling-elements.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nCopy and paste the following code into your project:\r\n\r\n<ComponentSource name=\"circling-elements\" />\r\n\r\nAdd the following animation and keyframes to your `globals.css` file:\r\n\r\n<CodeSnippet title=\"globals.css\">\r\n```css\r\n{\r\n/* ... */\r\n  @theme: {\r\n    --animate-circling: circling;\r\n    @keyframes circling {\r\n      0% {\r\n        transform: rotate(calc(var(--offset) * 1deg)) translate(calc(var(--radius) * 1px), 0) rotate(calc(var(--offset) * -1deg));\r\n      }\r\n      100% {\r\n        transform: rotate(calc(360deg + (var(--offset) * 1deg))) translate(calc(var(--radius) * 1px), 0) rotate(calc(-360deg + (var(--offset) * -1deg)));\r\n      }\r\n    },\r\n  },\r\n};\r\n```\r\n</CodeSnippet>\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nYou only need to wrap your elements with the `CirclingElements` component, everything else is taken care of by the component itself.\r\n\r\n## Understanding the component\r\n\r\nUnder the hood, the component wraps all the children in a `relative` container, then sets all children to `absolute` to allow the circling movement.\r\n\r\nThe animation is achieved through CSS keyframes that create a circular motion. At the start (0%), each element is rotated by its offset angle, translated outward by the radius, and counter-rotated to maintain orientation. At the end (100%), it completes a full 360-degree rotation while maintaining the same radius and orientation. The `--circling-direction` variable allows reversing the animation direction.\r\n\r\nThe keyframes use CSS calc() to dynamically compute the transforms based on the following variables:\r\n\r\n- `--circling-offset` (element's starting angle)\r\n- `--circling-radius` (circle size)\r\n- `--circling-direction` (1 or -1 for direction)\r\n\r\n## Examples\r\n\r\n### Easing & direction\r\n\r\nYou can set custom easings and reverse direction for the animation, as you can see in this demo.\r\n\r\n<ComponentPreview name=\"circling-elements-easing-demo\" />\r\n\r\n## Credits\r\n\r\nPorted to Framer by [Achille Ernoult](https://x.com/achilleernlt)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        children<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The elements to be circled</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>radius</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`100`</TableCell>\r\n      <TableCell>The radius of the circle in pixels</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>duration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`10`</TableCell>\r\n      <TableCell>The duration of one complete rotation in seconds</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>easing</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`linear`</TableCell>\r\n      <TableCell>\r\n        The easing function for the animation. Refer to the official [mdn\r\n        docs](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function)\r\n        for more details\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>direction</TableCell>\r\n      <TableCell>`\"normal\" | \"reverse\"`</TableCell>\r\n      <TableCell>`normal`</TableCell>\r\n      <TableCell>\r\n        The direction of the animation. Set to `\"reverse\"` to reverse the\r\n        animation\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>pauseOnHover</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Pause the animation on hover</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for the container</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n## Credits\r\n\r\nInspiration for the demo from [Bakken & Bæck](https://www.instagram.com/p/DBG5fLdiN4Q/?img_index=1)\r\n"
    },
    {
      "slug": "components/blocks/css-box",
      "title": "3D CSS Box",
      "description": "A simple 3D box component with",
      "content": "\r\n\r\n<ComponentPreview name=\"css-box-demo\" framerLink=\"https://framer.university/resources/3d-text-cube-interaction-in-framer\" />\r\n\r\nArtwork inspiration from [Ignite Amsterdam](https://www.instagram.com/p/CaDHtZKrk0F/)\r\n\r\n## Credits\r\n\r\nThe component is derived from the Box chapter of David De Sandro's [extremely awesome Intro to CSS 3D transforms tutorial](https://3dtransforms.desandro.com/box). \r\n\r\nPorted to Framer by [Framer University](https://framer.university/)\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/3d-css-box.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"css-box\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nThe component renders a fully-featured 3D cube. Pass `width`, `height`, `depth` and optionally six React nodes for the faces. You may also grab the cube with a ref for programmatic control. \r\n\r\n<CodeSnippet title=\"High-level cube example\">\r\n```tsx\r\nimport { useRef } from \"react\"\r\nimport CSSBox, { CSSBoxRef } from \"@/components/blocks/css-box\"\r\n\r\nexport default function CubeExample() {\r\n  const cubeRef = useRef<CSSBoxRef>(null)\r\n\r\n  return (\r\n    <>\r\n      <CSSBox\r\n        ref={cubeRef}\r\n        width={220}\r\n        height={220}\r\n        depth={220}\r\n        perspective={800}\r\n        draggable\r\n        faces={{\r\n          front:  <img src=\"/images/front.png\"  alt=\"Front\"  />,\r\n          back:   <img src=\"/images/back.png\"   alt=\"Back\"   />,\r\n          left:   <img src=\"/images/left.png\"   alt=\"Left\"   />,\r\n          right:  <img src=\"/images/right.png\"  alt=\"Right\"  />,\r\n          top:    <img src=\"/images/top.png\"    alt=\"Top\"    />,\r\n          bottom: <img src=\"/images/bottom.png\" alt=\"Bottom\" />,\r\n        }}\r\n      />\r\n\r\n      <Button onClick={() => cubeRef.current?.showTop()}>\r\n        Show Top\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n```\r\n</CodeSnippet>\r\n\r\n## Understanding the component\r\n\r\nBefore you dive into it, I highly recommend reading [Intro to CSS 3D transforms](https://3dtransforms.desandro.com/) by David DeSandro. It's a really great resource for understanding the basics, and this component is essentially just a react & tailwind port of the Box chapter.\r\n\r\n### Face layout\r\n\r\nAs you know, a box is a 3D object that has six faces. Each face is an absolutely-positioned `<div>` that lives in the same 3D context (`transform-style: preserve-3d`).  \r\nWe pre-rotate every face so that their local **+Z** axis points outward and then translate it by half of the appropriate dimension:\r\n\r\n<CodeSnippet title=\"Face layout\">\r\n```tsx\r\nrotateY( 0deg) translateZ(depth / 2) → front\r\nrotateY(180deg) translateZ(depth / 2) → back\r\nrotateY( 90deg) translateZ(width / 2) → right\r\nrotateY(-90deg) translateZ(width / 2) → left\r\nrotateX( 90deg) translateZ(height/ 2) → top\r\nrotateX(-90deg) translateZ(height/ 2) → bottom\r\n```\r\n</CodeSnippet>\r\n\r\n### Rotation mechanics\r\n\r\n1. Two motion values `baseRotateX` and `baseRotateY` hold the raw rotation in degrees.  \r\n2. They are piped through `useSpring` so they feel springy and configurable (`stiffness`, `damping`). See [Motion – useSpring](https://motion.dev/docs/react-use-spring) for more details.\r\n3. We combine them into a single CSS transform:\r\n\r\n<CodeSnippet title=\"Rotation mechanics\">\r\n```ts\r\nconst transform = useTransform([springX, springY], ([x, y]) =>\r\n  `translateZ(-${depth / 2}px) rotateX(${x}deg) rotateY(${y}deg)`\r\n)\r\n```\r\n</CodeSnippet>\r\n\r\n### Drag interaction\r\n\r\nThe box can be rotated through mouse drags or touch input. 3D rotation can be a nasty thing, especially when dealing with [Gimbal Lock](https://base.movella.com/s/article/Understanding-Gimbal-Lock-and-how-to-prevent-it?language=en_US). While the almighty, super complex [quaternions](https://www.youtube.com/watch?v=zjMuIxRvygQ) could prevent this issue (Three.js provides great utilities for that), implementing them felt like overkill here - at that point, the entire box might as well be rendered in Three.js. \r\n\r\nThe current approach maps mouse/touch movement directly to rotation around the X and Y axes. The implementation is pretty intuitive, while the actual feel of it can be sometimes unintuitive. Apologies for my laziness here.\r\n\r\nWhen `draggable` is enabled, pointer movement gets translated into smooth rotational changes:\r\n\r\n<CodeSnippet title=\"Mouse movement to rotation\">\r\n```ts\r\nΔx → rotateY\r\nΔy → rotateX\r\n```\r\n</CodeSnippet>\r\n\r\nWe do this by subscribing to `mousemove` and `touchmove` events and projecting the movement to rotation deltas. During dragging the spring’s stiffness is temporarily halved to give a slightly “looser” feel. \r\n\r\n<CodeSnippet title=\"Drag interaction\">\r\n```tsx\r\nbaseRotateX.set(startRotation.current.x - deltaY / 2)\r\nbaseRotateY.set(startRotation.current.y + deltaX / 2)\r\n```\r\n</CodeSnippet>\r\n\r\nModify that value to adjust the sensitivity of the drag.\r\n\r\n### Imperative API\r\n\r\nVia `ref` you can trigger the following methods:\r\n\r\n- `showFront | showBack | showLeft | showRight | showTop | showBottom`\r\n- `rotateTo(x: number, y: number)` – set exact angles\r\n- `getCurrentRotation()` – read the live values\r\n\r\nThis can be handy for syncing cube state to a carousel or step-based walkthrough. For example, you can trigger a cube rotation with hover:\r\n\r\n<ComponentPreview name=\"css-box-hover-demo\" framerLink=\"https://framer.university/resources/3d-stacked-tower-spin-animation-in-framer\" />\r\n\r\nOr, tie the rotation to a scroll progress:\r\n\r\n<ComponentPreview name=\"css-box-scroll-demo\" />\r\n\r\n## Notes\r\n\r\nAs it was pointed out above, implementing a similar component in Three.js would have been a lot easier and would give you much more flexibility and overall control over the rotation. You are still welcomed to use this component if you'd like to skip installing Three.js for whatever reason :). \r\n\r\n## Resources\r\n\r\n- [Intro to CSS 3D transforms](https://3dtransforms.desandro.com/) by David DeSandro\r\n- [Gimbal Lock](https://base.movella.com/s/article/Understanding-Gimbal-Lock-and-how-to-prevent-it?language=en_US) \r\n- [Quaternions explained](https://www.youtube.com/watch?v=zjMuIxRvygQ) by 3Blue1Brown\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>width<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Width of the cube (in&nbsp;px)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>height<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Height of the cube (in&nbsp;px)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>depth<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Depth of the cube (in&nbsp;px)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>perspective</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`600`</TableCell>\r\n      <TableCell>Perspective distance applied to the outer wrapper</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>stiffness</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`100`</TableCell>\r\n      <TableCell>Spring stiffness for rotations</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>damping</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`30`</TableCell>\r\n      <TableCell>Spring damping factor</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional classes for the outer wrapper</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>showBackface</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Reveal back-faces if you need double-sided content</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>faces</TableCell>\r\n      <TableCell>`{ front? back? left? right? top? bottom?: ReactNode }`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Individual React nodes for every face</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>draggable</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Enable/disable mouse &amp; touch rotation</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n## Ref Methods\r\n\r\nThe component exposes several methods through a ref that allow programmatic control of the cube's rotation:\r\n\r\n<Table>\r\n  <TableHead>\r\n    <TableRow>\r\n      <TableCell>Method</TableCell>\r\n      <TableCell>Type</TableCell>\r\n      <TableCell>Description</TableCell>\r\n    </TableRow>\r\n  </TableHead>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>showFront</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>Rotates the cube to show the front face (0°, 0°)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>showBack</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>Rotates the cube to show the back face (0°, 180°)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>showLeft</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>Rotates the cube to show the left face (0°, -90°)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>showRight</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>Rotates the cube to show the right face (0°, 90°)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>showTop</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>Rotates the cube to show the top face (-90°, 0°)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>showBottom</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>Rotates the cube to show the bottom face (90°, 0°)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>rotateTo</TableCell>\r\n      <TableCell>`(x: number, y: number) => void`</TableCell>\r\n      <TableCell>Rotates the cube to specific X and Y angles in degrees</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>getCurrentRotation</TableCell>\r\n      <TableCell>`() => { x: number, y: number }`</TableCell>\r\n      <TableCell>Returns current X and Y rotation angles in degrees</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n"
    },
    {
      "slug": "components/blocks/drag-elements",
      "title": "Drag Elements",
      "description": "Drag any html element — image, div, video — around freely in a container.",
      "content": "\r\n\r\n<ComponentPreview name=\"drag-elements-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/drag-elements.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"drag-elements\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nYou only need to wrap your elements with the `DragElements` component, everything else is taken care of by the component itself.\r\n\r\nUnder the hood, the component wraps all the children in a `relative` container, then sets all children to `absolute` to allow free dragging. For the dragging events and logic it uses motion`s Drag gestures.\r\n\r\nThe children are constrained to move withing the container, but you can set the `dragConstraints` prop to define a custom container, or custom `top`, `bottom`, `left` and `right` value. For the other drag props, refer to motion's [Drag gestures](https://motion.dev/docs/react-gestures#drag) documentation.\r\n\r\nIn the demo above, the `dragMomentum` prop is set to `false` to disable the \"physics-based\" movement, but in the following example, you can see a more funky use-case where it is enabled.\r\n\r\n## Examples\r\n\r\n### Drag momentum\r\n\r\n<ComponentPreview name=\"drag-elements-momentum-demo\" />\r\n\r\n## Notes\r\n\r\nIf you use images, or videos, make sure to set the `draggable` attribute to `false`, as they have priority for drag events.\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The elements to be dragged</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragElastic</TableCell>\r\n      <TableCell>`number | { top?: number; left?: number; right?: number; bottom?: number } | boolean`</TableCell>\r\n      <TableCell>`0.5`</TableCell>\r\n      <TableCell>Determines how much the element can be dragged outside the constraints</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragConstraints</TableCell>\r\n      <TableCell>`{ top?: number; left?: number; right?: number; bottom?: number } | React.RefObject<Element>`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>An object with top, left, right, bottom properties, or a ref to another element, to constrain the drag area</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragMomentum</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>If true, the element will continue moving when the drag gesture ends</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragTransition</TableCell>\r\n      <TableCell>`InertiaOptions`</TableCell>\r\n      <TableCell>`{ bounceStiffness: 200, bounceDamping: 300 }`</TableCell>\r\n      <TableCell>Specifies the spring physics for the drag end animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragPropagation</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>If true, allows dragging events to propagate to parent drag gestures</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>selectedOnTop</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>If true, brings the dragged element to the front</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for the container</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/blocks/float",
      "title": "Float",
      "description": "A component that creates a gentle floating effect on its child.",
      "content": "\r\n\r\n<ComponentPreview name=\"float-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/float.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"float\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nJust wrap your content you want to float with the `Float` component, and the animation will take care of the rest.\r\n\r\n## Understanding the component\r\n\r\nThe component creates a smooth floating animation using sine waves for both movement and rotation. It accepts three main props:\r\n\r\n1. **Movement**: The `amplitude` prop controls movement range on X, Y and Z axes in pixels.\r\n\r\n2. **Rotation**: The `rotationRange` prop sets maximum rotation angles in degrees for each axis.\r\n\r\n3. **Animation Speed**: The `speed` prop (default: 0.5) controls animation speed - higher is faster.\r\n\r\n## Examples\r\n\r\nBy default, multiple Float components will move in unison. Use the `timeOffset` prop to create more organic movement.\r\n\r\n<ComponentPreview name=\"float-offset-demo\" />\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        children<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>speed</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.5`</TableCell>\r\n      <TableCell>Speed of the floating animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>amplitude</TableCell>\r\n      <TableCell>`[number, number, number]`</TableCell>\r\n      <TableCell>`[10, 30, 30]`</TableCell>\r\n      <TableCell>Movement range in pixels for X, Y and Z axes</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>rotationRange</TableCell>\r\n      <TableCell>`[number, number, number]`</TableCell>\r\n      <TableCell>`[15, 15, 7.5]`</TableCell>\r\n      <TableCell>Maximum rotation in degrees for X, Y and Z axes</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>timeOffset</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>\r\n        Offset to stagger animations between multiple instances\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/blocks/marquee-along-svg-path",
      "title": "Marquee Along SVG Path",
      "description": "A component that scrolls html elements along an SVG path.",
      "content": "\r\n\r\n<ComponentPreview name=\"marquee-along-svg-path-demo\" framerLink=\"https://framer.university/resources/ticker-path-component-for-framer\" />\r\n\r\nA start-to-finish tutorial on this component is available on [Codrops](https://tympanus.net/codrops/2025/06/17/building-an-infinite-marquee-along-an-svg-path-with-react-motion/?_thumbnail_id=95755).\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/marquee-along-svg-path.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"marquee-along-svg-path\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\n1. Wrap your elements with the `MarqueeAlongSvgPath` component\r\n2. Provide an SVG path via the required `path` prop (the `d` attribute of an SVG path)\r\n3. Configure the SVG viewport with optional `viewBox` and `preserveAspectRatio` props for proper scaling\r\n4. The elements are distributed evenly along the path, so you'll need to experiment with:\r\n   - The `repeat` prop to control how many copies of your elements appear\r\n   - The size of your elements (width/height)\r\n\r\nThe component is really similar to the [Simple Marquee Component](https://fancycomponents.dev/docs/components/blocks/simple-marquee), and has the same features and props (and a bit more:)):\r\n\r\n- Changing velocity based on scroll velocity\r\n- Slow down on hover\r\n- Draggable elements\r\n- Custom easing\r\n\r\n## Understanding the component\r\n\r\nBefore you dive into understanding this component, please read through the <Link href=\"/docs/components/blocks/simple-marquee\">Simple Marquee</Link> component's documentation, as this one is almost identical.\r\n\r\nThe main difference is that we move the children along an SVG path (instead of a \"straight line\" positioned with `flexbox` system, as in the other component). **The magic that makes this possible is the `offsetPath` CSS property.**\r\n\r\n> The `offset-path` CSS property specifies a path for an element to follow and determines the element's positioning within the path's parent container or the SVG coordinate system. The path is a line, a curve, or a geometrical shape along which the element gets positioned or moves.\r\n\r\nas per the [offset-path documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/offset-path).\r\n\r\nWe also use the `offsetDistance` property to actually move/offset the element to the correct position along the path in the `offsetPath` CSS property.\r\n\r\n<CodeSnippet title=\"Offset path example\">\r\n```jsx\r\nstyle={{\r\n  ...\r\n  offsetPath: `path('${path}')`,\r\n  offsetDistance: itemOffset,\r\n}}\r\n```\r\n</CodeSnippet>\r\n\r\nEach item's offset is calculated separately using an `useTransform` hook from `motion/react`, by converting the `baseOffset` to a percentage value:\r\n\r\n<CodeSnippet title=\"Item offset calculation\">\r\n```jsx\r\nconst itemOffset = useTransform(baseOffset, (v) => {\r\n  // evenly distribute items along the path (0-100%)\r\n  const position = (itemIndex * 100) / items.length\r\n  const wrappedValue = wrap(0, 100, v + position)\r\n  return `${easing ? easing(wrappedValue / 100) * 100 : wrappedValue}%`\r\n})\r\n```\r\n</CodeSnippet>\r\n\r\nThe items are evenly distributed along the path. The `wrap` function ensures that items surpassing `100%` are \"wrapped back\" to `0%`. The `baseOffset` value (the input value for the `useTransform` hook) is calculated by a bunch of different factors, such as:\r\n- a base velocity, which moves the items along the path at a constant speed\r\n- scroll velocity\r\n- slowing down on hover\r\n- direction\r\n- drag velocity\r\n\r\nMost of these factors are calculated inside an `useAnimationFrame` hook, which runs every frame. Most of these values are either motion values or refs to avoid unnecessary re-renders. Please refer to the <Link href=\"/docs/components/blocks/simple-marquee\">Simple Marquee Component documentation</Link>, there is a detailed explanation for each part.\r\n\r\n### Z-Index Management\r\n\r\nYou can enable increasing z-index based on the progress along the path by setting `enableRollingZIndex` to `true`. This is pretty useful when a path is self-crossing, so elements further along the path appear above earlier ones.\r\n\r\nThe callback function which calculates the current z-index is fairly simple. You can set the `zIndexBase` and `zIndexRange` props to control the base and range of the z-index values. The `zIndexBase` is the starting value, and the `zIndexRange` is the difference between the highest and lowest z-index values.\r\n\r\n<CodeSnippet title=\"Z-Index calculation\">\r\n```jsx\r\n// Function to calculate z-index based on offset distance\r\nconst calculateZIndex = useCallback(\r\n  (offsetDistance: number) => {\r\n    if (!enableRollingZIndex) {\r\n      return undefined;\r\n    }\r\n    \r\n    // Simple progress-based z-index\r\n    const normalizedDistance = offsetDistance / 100;\r\n    return Math.floor(zIndexBase + normalizedDistance * zIndexRange);\r\n  },\r\n  [enableRollingZIndex, zIndexBase, zIndexRange]\r\n);\r\n\r\n// ...\r\n\r\n// Inside an element:\r\nconst zIndex = useTransform(\r\n  currentOffsetDistance,\r\n  (value) => calculateZIndex(value)\r\n);\r\n```\r\n</CodeSnippet>\r\n\r\n## CSS Variable Interpolation\r\n\r\nIt's also possible to map any CSS property to the path progress using the `cssVariableInterpolation` prop. It accepts an array of objects with `property` and `from` and `to` values. High level example:\r\n\r\n<CodeSnippet title=\"CSS variable interpolation example\">\r\n```jsx\r\n<MarqueeAlongSvgPath\r\n  path=\"M0,0 C0,0 100,0 100,100\"\r\n  cssVariableInterpolation={[\r\n    { property: \"opacity\", from: 0, to: 1.5 },\r\n    { property: \"scale\", from: 0.1, to: 1 },\r\n  ]}\r\n>\r\n  {/* Your content */}\r\n</MarqueeAlongSvgPath>\r\n```\r\n</CodeSnippet>\r\n\r\n<ComponentPreview name=\"marquee-along-svg-path-mapping-demo\" />\r\n\r\n## Notes\r\n\r\nThe component's performance may be impacted by the complexity and length of the SVG path, as well as the number of elements being animated. Keep an eye on it and tweak these factors if you experience performance issues.\r\n\r\n## Resources\r\n\r\n- <Link href=\"/docs/components/blocks/simple-marquee\">Simple Marquee Component</Link>\r\n- [offset-path by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/offset-path)\r\n- [CSS motion path by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_motion_path)\r\n- [Motion along path by motion.dev](https://examples.motion.dev/react/motion-path)\r\n\r\n## Credits\r\n\r\nClick on the individual images in the 2nd demo to see the original artworks & authors.\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The elements to be scrolled along the path</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>path<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The SVG path string that defines the motion path</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>pathId</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Optional ID for the SVG path element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>preserveAspectRatio</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`\"xMidYMid meet\"`</TableCell>\r\n      <TableCell>SVG preserveAspectRatio attribute value</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>showPath</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to show the SVG path</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>width</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`\"100%\"`</TableCell>\r\n      <TableCell>Width of the SVG container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>height</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`\"100%\"`</TableCell>\r\n      <TableCell>Height of the SVG container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>viewBox</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`\"0 0 100 100\"`</TableCell>\r\n      <TableCell>SVG viewBox attribute value</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>baseVelocity</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`5`</TableCell>\r\n      <TableCell>Base velocity of the animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>direction</TableCell>\r\n      <TableCell>`\"normal\" | \"reverse\"`</TableCell>\r\n      <TableCell>`\"normal\"`</TableCell>\r\n      <TableCell>Direction of the animation along the path</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>easing</TableCell>\r\n      <TableCell>`(value: number) => number`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Custom easing function for the animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>slowdownOnHover</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to slow down on hover</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>slowDownFactor</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.3`</TableCell>\r\n      <TableCell>Factor to slow down by when hovering</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>slowDownSpringConfig</TableCell>\r\n      <TableCell>`SpringOptions`</TableCell>\r\n      <TableCell>`{ damping: 50, stiffness: 400 }`</TableCell>\r\n      <TableCell>Spring configuration for hover slowdown</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>useScrollVelocity</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to use scroll velocity</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollAwareDirection</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to change direction based on scroll</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollSpringConfig</TableCell>\r\n      <TableCell>`SpringOptions`</TableCell>\r\n      <TableCell>`{ damping: 50, stiffness: 400 }`</TableCell>\r\n      <TableCell>Spring configuration for scroll velocity</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollContainer</TableCell>\r\n      <TableCell>`RefObject<HTMLElement> | HTMLElement | null`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Custom scroll container reference</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>repeat</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`3`</TableCell>\r\n      <TableCell>Number of times to repeat children</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>draggable</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether elements can be dragged</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragSensitivity</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.2`</TableCell>\r\n      <TableCell>Sensitivity of drag movement</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragVelocityDecay</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.96`</TableCell>\r\n      <TableCell>Decay rate of drag velocity</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragAwareDirection</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to change direction based on drag</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>grabCursor</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to show grab cursor when draggable</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>enableRollingZIndex</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to enable rolling z-index effect</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>zIndexBase</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`1`</TableCell>\r\n      <TableCell>Base z-index value</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>zIndexRange</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`10`</TableCell>\r\n      <TableCell>Range of z-index values</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>cssVariableInterpolation</TableCell>\r\n      <TableCell>`Array<{ property: string, from: number, to: number }>`</TableCell>\r\n      <TableCell>`[]`</TableCell>\r\n      <TableCell>CSS properties to interpolate along the path</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/blocks/media-between-text",
      "title": "Media Between Text",
      "description": "A component that animates a media (image or video) between two text elements.",
      "content": "\r\n\r\n<ComponentPreview name=\"media-between-text-demo\" />\r\n\r\nArtwork by [Joffey](https://www.instagram.com/designbyjoffey/)\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/media-between-text.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"media-between-text\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nThe component is extremely simple, and only consists of two text elements and a media element (either an image or a video). The trick for the smooth animation is to use `layout` animations on the two texts, so they smoothly transition when the media element is revealed.\r\nYou can trigger the media reveal animation by `hover`, `ref`, or `inView`:\r\n\r\n- `hover`: The media will animate when you hover over the component\r\n- `ref`: You can call the `animate` and `reset` methods exposed via a ref to manually control the animation\r\n- `inView`: The media will animate when the component is in view. You can pass an `useInViewOptionsProp` prop to customize the in view detection. Refer to the [motion documentation](https://motion.dev/docs/docs/react-use-in-view) for more details.\r\n\r\nYou can also customize the animation by passing a `animationVariants` prop. Please use `animate` and `initial` variants. Refer to the [motion documentation](https://motion.dev/docs/react-animation#animatable-values) for more details.\r\n\r\n## Examples\r\n\r\n### Scroll\r\n\r\nScroll down to trigger the animation. In this case, you can pass down a containerRef prop to the component to track when elements come into view within that specific container, rather than the entire viewport. This is useful when you want to trigger animations based on scrolling within a specific scrollable container.\r\n\r\n<ComponentPreview name=\"media-between-text-scroll-demo\" />\r\n\r\nArtworks by [Tim Rodenböker](https://www.instagram.com/tim_rodenbroeker/), [polyhop](https://www.instagram.com/polyhop/), [Andreion de Castro](https://www.instagram.com/andreiongd/), [Lorraine Li](https://www.instagram.com/lorrr.l/)\r\n\r\n### Vertical & Ref\r\n\r\nYou can also style the whole container, the media element, and the text elements separately. In this example, we use a column-layout to create a vertical effect. The animation can also be triggered from outside the component, by calling the `animate` and `reset` methods exposed via a ref. Click on the \"Open\" button to trigger the animation.\r\n\r\n<ComponentPreview name=\"media-between-text-vertical-demo\" />\r\n\r\nVideo from [chrbutler.com](https://www.chrbutler.com/what-i-want-from-the-internet)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>firstText<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to display before the media</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>secondText<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to display after the media</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>mediaUrl<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>URL of the media (image or video) to display</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>mediaType<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`\"image\" | \"video\"`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Type of media to display</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>mediaContainerClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Optional class name for the media container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>fallbackUrl</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Fallback URL for video poster or image loading</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`\"p\"`</TableCell>\r\n      <TableCell>HTML Tag to render the text elements as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>autoPlay</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether video should autoplay</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>loop</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether video should loop</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>muted</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether video should be muted</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>playsInline</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether video should play inline</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>alt</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Alt text for image</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>triggerType</TableCell>\r\n      <TableCell>`\"hover\" | \"ref\" | \"inView\"`</TableCell>\r\n      <TableCell>`\"hover\"`</TableCell>\r\n      <TableCell>Type of animation trigger</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>containerRef</TableCell>\r\n      <TableCell>`React.RefObject<HTMLDivElement>`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Reference to container element for inView trigger</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>useInViewOptionsProp</TableCell>\r\n      <TableCell>`UseInViewOptions`</TableCell>\r\n      <TableCell>`{ once: true, amount: 0.5, root: containerRef }`</TableCell>\r\n      <TableCell>Options for useInView hook</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>animationVariants</TableCell>\r\n      <TableCell>`{ initial: Variants[\"initial\"]; animate: Variants[\"animate\"] }`</TableCell>\r\n      <TableCell>`{ initial: { width: 0, opacity: 1 }, animate: { width: \"auto\", opacity: 1, transition: { duration: 0.4, type: \"spring\", bounce: 0 } } }`</TableCell>\r\n      <TableCell>Custom animation variants</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Optional class name for the root element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>leftTextClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Optional class name for the left text element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>rightTextClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Optional class name for the right text element</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>"
    },
    {
      "slug": "components/blocks/screensaver",
      "title": "Screensaver",
      "description": "A component that animates its child with the infamous screensaver effect.",
      "content": "\r\n\r\n<ComponentPreview name=\"screensaver-demo\" framerLink=\"https://www.soyakil.fr/ressources/screensaver\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/screensaver.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"use-dimensions\" />\r\n\r\n<ComponentSource name=\"screensaver\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nJust wrap your content with the component, and the animation will take care of the rest.\r\nYou also need to pass a container ref to the component — which will be used to constrain the screensaver component.\r\n\r\n## Credits\r\n\r\nPorted to Framer by [Achille Ernoult](https://x.com/achilleernlt)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>containerRef<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.RefObject<HTMLElement>`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Reference to the container for the screensaver</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>speed</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`3`</TableCell>\r\n      <TableCell>Speed of the animation in pixels per second</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>startPosition</TableCell>\r\n      <TableCell>`{ x: number; y: number }`</TableCell>\r\n      <TableCell>`{ x: 0, y: 0 }`</TableCell>\r\n      <TableCell>Starting position of the element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>startAngle</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`45`</TableCell>\r\n      <TableCell>Starting angle of the element in degrees</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/blocks/simple-marquee",
      "title": "Simple Marquee",
      "description": "A simple marquee component for scrolling HTML elements.",
      "content": "\r\n\r\n<ComponentPreview name=\"simple-marquee-demo\" />\r\n\r\nArtworks from [Cosmos](https://www.cosmos.so/danielpetho/gradients/).\r\n\r\n## Credits\r\n\r\nThis component is inspired by [this scroll example](https://codesandbox.io/p/sandbox/framer-motion-scroll-velocity-r1dy4u?from-embed) by Motion.\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs\r\n  command='shadcn@latest add \"https://fancycomponents.dev/r/simple-marquee.json\"'\r\n  npx\r\n/>\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"simple-marquee\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nYou only need to wrap your elements with the `SimpleMarquee` component, everything else is taken care of by the component itself.\r\n\r\n## Understanding the component\r\n\r\nUnlike most marquee implementations that use simple CSS animations, this component uses Motion's `useAnimationFrame` hook to provide more control over the animation. This allows for a bunch of sesame effects, such as:\r\n\r\n- Changing velocity and direction by dragging\r\n- Adjusting speed in response to scrolling\r\n- Adding custom easing functions\r\n- Creating pause/slow on hover effects\r\n\r\n### Core Animation\r\n\r\nThe main magic of this component is the `useAnimationFrame` hook from Motion, which executes our anim code on every frame. Here's how it works:\r\n\r\n1. We create motion values (using `useMotionValue`) to track the x or y position:\r\n\r\n<CodeSnippet title=\"Motion values\">\r\n  ```tsx const baseX = useMotionValue(0) const baseY = useMotionValue(0) ```\r\n</CodeSnippet>\r\n\r\n2. We define a `baseVelocity` prop that determines the default speed and direction:\r\n\r\n<CodeSnippet title=\"Base velocity\">\r\n  ```tsx // Convert baseVelocity to the correct direction const\r\n  actualBaseVelocity = direction === \"left\" || direction === \"up\" ?\r\n  -baseVelocity : baseVelocity ```\r\n</CodeSnippet>\r\n\r\n3. On each animation frame inside the `useAnimationFrame` hook, we increment the position values, by adding that velocity to the current position:\r\n\r\n<CodeSnippet title=\"Animation frame\">\r\n```tsx\r\n// Inside useAnimationFrame\r\nlet moveBy = directionFactor.current * baseVelocity * (delta / 1000)\r\n\r\nif (isHorizontal) {\r\nbaseX.set(baseX.get() + moveBy)\r\n} else {\r\nbaseY.set(baseY.get() + moveBy)\r\n}\r\n\r\n````\r\n</CodeSnippet>\r\n\r\n4. Since we're constantly increasing/decreasing that value, at some point our elements would move out far away from the viewport. Therefore, we use the `useTransform` hook to convert that x/y value to a percentage, and wrapping it between 0 and -100. With this, we essentially force our elements to always move from 0 to -100. Once they reach -100, they will start their journey from 0% again.\r\n\r\n<CodeSnippet title=\"Transformation\">\r\n```tsx\r\nconst x = useTransform(baseX, (v) => {\r\n  // wrap it between 0 and -100\r\n  const wrappedValue = wrap(0, -100, v)\r\n  // Apply easing if provided, otherwise use linear\r\n  return `${easing ? easing(wrappedValue / -100) * -100 : wrappedValue}%`\r\n})\r\n````\r\n\r\n</CodeSnippet>\r\n\r\n5. The `wrap` helper function ensures values stay between 0 and -100:\r\n\r\n<CodeSnippet title=\"Wrapping\">\r\n```tsx\r\nconst wrap = (min: number, max: number, value: number): number => {\r\n  const range = max - min\r\n  return ((((value - min) % range) + range) % range) + min\r\n}\r\n```\r\n</CodeSnippet>\r\n\r\nThis example demonstrates the basic mechanism:\r\n\r\n<ComponentPreview name=\"simple-marquee-explainer-demo\" />\r\n\r\n### Preventing \"Jumps\" With Repetition\r\n\r\nAs you can see above, elements eventually leave the container and jump back to the beginning when they reach -100%. This creates a visible \"jump\" in the animation.\r\n\r\nWe can solve this by using the `repeat` prop to duplicate all child elements multiple times inside the component:\r\n\r\n<CodeSnippet title=\"Repeat example\">\r\n  ```tsx\r\n  {Array.from({ length: repeat }, (_, i) => i).map((i) => (\r\n    <motion.div\r\n      key={i}\r\n      className={cn(\r\n        \"shrink-0\",\r\n        isHorizontal && \"flex\",\r\n        draggable && grabCursor && \"cursor-grab\"\r\n      )}\r\n      style={isHorizontal ? { x } : { y }}\r\n      aria-hidden={i > 0}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  ))}\r\n  ```\r\n</CodeSnippet>\r\n\r\nBy default, the `repeat` value is 3, which means your content is duplicated three times. With enough repetitions, new elements enter the visible area before existing ones leave, creating an illusion of continuous animation. Try increasing the `repeat` value in the demo above to see how it eliminates the jumpiness.\r\n\r\n## Features\r\n\r\nThe marquee's final velocity and behavior are determined by combining several factors that can be enabled through props:\r\n\r\n### Slow Down On Hover\r\n\r\nWhen `slowdownOnHover` is set to `true`, the component tracks hover state and applies a slowdown factor:\r\n\r\n<CodeSnippet title=\"Slow down on hover\">\r\n```tsx\r\n// Track hover state\r\nconst isHovered = useRef(false)\r\nconst hoverFactorValue = useMotionValue(1)\r\nconst smoothHoverFactor = useSpring(hoverFactorValue, slowDownSpringConfig)\r\n\r\n// In component JSX\r\n\r\n<motion.div\r\n  onHoverStart={() => (isHovered.current = true)}\r\n  onHoverEnd={() => (isHovered.current = false)}\r\n  // ...other props\r\n>\r\n  {/* ... */}\r\n</motion.div>\r\n\r\n// In animation frame\r\nif (isHovered.current) {\r\nhoverFactorValue.set(slowdownOnHover ? slowDownFactor : 1)\r\n} else {\r\nhoverFactorValue.set(1)\r\n}\r\n\r\n// Apply the hover factor to movement calculation\r\nlet moveBy = directionFactor.current _\r\nactualBaseVelocity _\r\n(delta / 1000) \\*\r\nsmoothHoverFactor.get()\r\n\r\n````\r\n</CodeSnippet>\r\n\r\nKey props for this feature:\r\n\r\n- `slowDownFactor` controls how much to slow down (default: 0.3 or 30% of original speed)\r\n- `smoothHoverFactor` uses spring physics for smooth transitions between speeds. This ensures that the velocity change is not happening instantly, but with a smooth animation. For this, we use the `useSpring` hook from Motion.\r\n- `slowDownSpringConfig` lets you customize the spring animation parameters. Please refer to the [Motion documentation](https://motion.dev/docs/react-use-spring) for more details.\r\n\r\n### Scroll-Based Velocity\r\n\r\nWhen `useScrollVelocity` is enabled, the component tracks scroll velocity and uses it to influence the final velocity of the marquee:\r\n\r\n<CodeSnippet title=\"Scroll velocity\">\r\n```tsx\r\nconst { scrollY } = useScroll({\r\n  container: (scrollContainer as RefObject<HTMLDivElement>) || innerContainer.current,\r\n})\r\nconst scrollVelocity = useVelocity(scrollY)\r\nconst smoothVelocity = useSpring(scrollVelocity, scrollSpringConfig)\r\n\r\n// Transform scroll velocity into a factor for marquee speed\r\nconst velocityFactor = useTransform(\r\n  useScrollVelocity ? smoothVelocity : defaultVelocity,\r\n  [0, 1000],\r\n  [0, 5],\r\n  { clamp: false }\r\n)\r\n\r\n// In animation frame\r\n// Adjust movement based on scroll velocity\r\nmoveBy += directionFactor.current * moveBy * velocityFactor.get()\r\n\r\n// Change direction based on scroll if enabled\r\nif (scrollAwareDirection && !isDragging.current) {\r\n  if (velocityFactor.get() < 0) {\r\n    directionFactor.current = -1\r\n  } else if (velocityFactor.get() > 0) {\r\n    directionFactor.current = 1\r\n  }\r\n}\r\n````\r\n\r\n</CodeSnippet>\r\n\r\nThis creates an interactive effect where:\r\n\r\n- Scrolling adds to the marquee's velocity\r\n- If `scrollAwareDirection` is enabled, the scroll direction can reverse the marquee direction\r\n- Similar to the hover, we interpolate between the current and scroll velocity by using Spring physics with the `useSpring` hook from Motion. You can customize the spring animation parameters using the `scrollSpringConfig` prop.\r\n\r\n### Custom Easing Functions\r\n\r\nThe `easing` prop allows you to transform the linear animation with custom easing curves:\r\n\r\n<CodeSnippet title=\"Custom easing\">\r\n```tsx\r\nconst x = useTransform(baseX, (v) => {\r\n  // Apply easing if provided, otherwise use linear\r\n  const wrappedValue = wrap(0, -100, v)\r\n  return `${easing ? easing(wrappedValue / -100) * -100 : wrappedValue}%`\r\n})\r\n```\r\n</CodeSnippet>\r\n\r\nThe easing function receives a normalized value between 0 and 1 and should return a transformed value. You need to provide an actual function here, not defined keyframes.\r\n\r\nYou can find ready-to-use easing functions at [easings.net](https://easings.net/).\r\n\r\n<ComponentPreview name=\"simple-marquee-easing-demo\" />\r\n\r\n### Draggable Marquee\r\n\r\nThe marquee can also be dragged. It uses pointer events for tracking the cursor position and applying the drag velocity:\r\n\r\n<CodeSnippet title=\"Dragging\">\r\n```tsx\r\n// State for tracking dragging\r\nconst isDragging = useRef(false)\r\nconst dragVelocity = useRef(0)\r\nconst lastPointerPosition = useRef({ x: 0, y: 0 })\r\n\r\nconst handlePointerDown = (e: React.PointerEvent) => {\r\nif (!draggable) return\r\n// Capture pointer events\r\n(e.currentTarget as HTMLElement).setPointerCapture(e.pointerId)\r\n\r\nif (grabCursor) {\r\n(e.currentTarget as HTMLElement).style.cursor = \"grabbing\"\r\n}\r\n\r\nisDragging.current = true\r\nlastPointerPosition.current = { x: e.clientX, y: e.clientY }\r\n\r\n// Pause automatic animation\r\ndragVelocity.current = 0\r\n}\r\n\r\nconst handlePointerMove = (e: React.PointerEvent) => {\r\nif (!draggable || !isDragging.current) return\r\n\r\nconst currentPosition = { x: e.clientX, y: e.clientY }\r\n\r\n// Calculate movement delta\r\nconst deltaX = currentPosition.x - lastPointerPosition.current.x\r\nconst deltaY = currentPosition.y - lastPointerPosition.current.y\r\n\r\n// Support for angled dragging\r\nconst angleInRadians = (dragAngle \\* Math.PI) / 180\r\nconst directionX = Math.cos(angleInRadians)\r\nconst directionY = Math.sin(angleInRadians)\r\n\r\n// Project movement along angle direction\r\nconst projectedDelta = deltaX _ directionX + deltaY _ directionY\r\n\r\n// Set drag velocity\r\ndragVelocity.current = projectedDelta \\* dragSensitivity\r\n\r\nlastPointerPosition.current = currentPosition\r\n}\r\n\r\n````\r\n</CodeSnippet>\r\n\r\nDuring animation frames, dragging takes precedence over other movement factors. Meaning, when the user is dragging, the marquee will move according to the drag velocity, and we ignore all other factors (such as the hover, scroll and the basic velocity).\r\n\r\n<CodeSnippet title=\"Drag animation frame\">\r\n```tsx\r\n// Inside useAnimationFrame\r\nif (isDragging.current && draggable) {\r\n  if (isHorizontal) {\r\n    baseX.set(baseX.get() + dragVelocity.current)\r\n  } else {\r\n    baseY.set(baseY.get() + dragVelocity.current)\r\n  }\r\n\r\n  // Add decay to dragVelocity when not moving\r\n  dragVelocity.current *= 0.9\r\n\r\n  // Stop completely if velocity is very small\r\n  if (Math.abs(dragVelocity.current) < 0.01) {\r\n    dragVelocity.current = 0\r\n  }\r\n\r\n  return\r\n}\r\n````\r\n\r\n</CodeSnippet>\r\n\r\nWhen the user stops dragging, velocity gradually decays back to the base velocity. You can customize the decay factor using the `dragVelocityDecay` prop.\r\n\r\n<CodeSnippet title=\"Drag velocity decay\">\r\n  ```tsx // Gradually decay drag velocity back to zero if (!isDragging.current\r\n  && Math.abs(dragVelocity.current) > 0.01){\" \"}\r\n  {(dragVelocity.current *= dragVelocityDecay)} else if (!isDragging.current){\" \"}\r\n  {(dragVelocity.current = 0)}\r\n  ```\r\n</CodeSnippet>\r\n\r\nThe component also supports changing direction based on drag movement:\r\n\r\n<CodeSnippet title=\"Drag direction\">\r\n  ```tsx // Update direction based on drag direction if (dragAwareDirection &&\r\n  Math.abs(dragVelocity.current) > 0.1){\" \"}\r\n  {\r\n    // If dragging in negative direction, set directionFactor to -1\r\n    // If dragging in positive direction, set directionFactor to 1\r\n    (directionFactor.current = Math.sign(dragVelocity.current))\r\n  }\r\n  ```\r\n</CodeSnippet>\r\n\r\n<ComponentPreview name=\"simple-marquee-drag-demo\" />\r\n\r\nArtwork credits: Artworks are from [Cosmos](https://cosmos.so/). I couldn't track down the original artists.\r\n\r\n## 3D Transforms\r\n\r\nTo make a 3d effect, you can apply 3D CSS transforms to the marquee container or its children. The following example shows how you can apply them on the container.\r\n\r\n<ComponentPreview name=\"simple-marquee-3d-demo\" />\r\n\r\nFor angled marquees, you can also apply the `dragAngle` prop to change the direction of the drag movement. This is useful if you want to rotate the marquee e.g. by 45 degrees.\r\n\r\n<CodeSnippet title=\"3D transforms\">\r\n```tsx\r\n// Convert dragAngle from degrees to radians\r\nconst angleInRadians = (dragAngle * Math.PI) / 180\r\n\r\n// Calculate the projection of the movement along the angle direction\r\nconst directionX = Math.cos(angleInRadians)\r\nconst directionY = Math.sin(angleInRadians)\r\n\r\n// Project the movement onto the angle direction\r\nconst projectedDelta = deltaX _ directionX + deltaY _ directionY\r\n\r\n```\r\n</CodeSnippet>\r\n\r\n## Resources\r\n\r\n- [Scroll animations from Motion](https://motion.dev/docs/react-scroll-animations)\r\n- [Easings](https://easings.net/)\r\n- [CSS Only implementation from Frontend FYI](https://www.youtube.com/watch?v=uw5jVO1eNF8)\r\n- [Gradient artworks](https://www.cosmos.so/danielpetho/gradients)\r\n- [Album covers](https://musicbrainz.org/doc/Cover_Art_Archive/API)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        children<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The elements to be scrolled</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for the container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>direction</TableCell>\r\n      <TableCell>`\"left\" | \"right\" | \"up\" | \"down\"`</TableCell>\r\n      <TableCell>`right`</TableCell>\r\n      <TableCell>\r\n        The direction of the marquee. Set to `\"left\"` or `\"right\"` to scroll\r\n        from left to right, or `\"up\"` or `\"down\"` to scroll from top to bottom\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>baseVelocity</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`5`</TableCell>\r\n      <TableCell>The base velocity of the marquee in pixels per second</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>easing</TableCell>\r\n      <TableCell>`(value: number) => number`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>\r\n        The easing function for the animation\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>slowdownOnHover</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to slow down the animation on hover</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>slowDownFactor</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.3`</TableCell>\r\n      <TableCell>The factor to slow down the animation on hover</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>slowDownSpringConfig</TableCell>\r\n      <TableCell>`SpringOptions`</TableCell>\r\n      <TableCell>`{ damping: 50, stiffness: 400 }`</TableCell>\r\n      <TableCell>\r\n        The spring config for the slow down animation\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>useScrollVelocity</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to use the scroll velocity to control the marquee speed</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollAwareDirection</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to adjust the direction based on the scroll direction</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollSpringConfig</TableCell>\r\n      <TableCell>`SpringOptions`</TableCell>\r\n      <TableCell>`{ damping: 50, stiffness: 400 }`</TableCell>\r\n      <TableCell>The spring config for the scroll velocity-based direction adjustment</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollContainer</TableCell>\r\n      <TableCell>`RefObject<HTMLElement> | HTMLElement | null`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The container to use for the scroll velocity. If not provided, the window will be used.</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>repeat</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`3`</TableCell>\r\n      <TableCell>The number of times to repeat the children</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>draggable</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to allow dragging of the marquee</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragSensitivity</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.2`</TableCell>\r\n      <TableCell>The sensitivity of the drag movement</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragVelocityDecay</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.96`</TableCell>\r\n      <TableCell>The decay of the drag velocity when released</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragAwareDirection</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to adjust the direction based on the drag velocity</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragAngle</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>The angle of the drag movement in degrees</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>grabCursor</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to change the cursor to grabbing when dragging</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n```\r\n"
    },
    {
      "slug": "components/blocks/stacking-cards",
      "title": "Stacking Cards",
      "description": "A component used in websites to display layered cards that stack on top of one another, often with interactive animations.",
      "content": "\r\n\r\n<ComponentPreview name=\"stacking-cards-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n  <TabsList>\r\n    <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n    <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n  </TabsList>\r\n  <TabsContent value=\"cli\">\r\n\r\n  <InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/stacking-cards.json&quot;\" npx />\r\n\r\n  </TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"stacking-cards\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nWrap `StackingCards` around the content you want to animate and `StackingCardItem` around each card you want to animate.\r\nThe structure looks like this:\r\n\r\n<CodeSnippet title=\"Stacking cards usage example\">\r\n```tsx\r\n<StackingCards>\r\n  <StackingCardItem>\r\n      {/* Your card goes here */}\r\n  </StackingCardItem>\r\n</StackingCards>\r\n```\r\n</CodeSnippet>\r\n\r\n## Understanding the component\r\n\r\nThe component utilizes scroll progress to determine the scale of each element. The first element has the highest scale multiplier, making it the smallest when it reaches the bottom of the container's scroll area, while the last element follows the opposite pattern, creating a layered effect.\r\n\r\nTo achieve this, I use each element's index to calculate its scale multiplier. Just simple as that! 😀\r\n\r\n## Notes\r\n\r\n- By default, this component uses the `window` to track scroll progress. However, in some cases, you may want to wrap it inside another scrollable container. To achieve this, simply define the container for `useScroll` from `motion`. In the `Demo` above, I defined the `containerRef` and passed it to the `scrollOptions` prop of the `StackingCards` component.\r\n\r\n- To ensure `StackingCardItem` works correctly, you need to define its height. This allows the wrapper to have a larger height than the card itself, ensuring that the `topPosition` functions properly.\r\n\r\n## Props\r\n\r\n### StackingCards\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        totalCards<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>\r\n        Total number of cards to be animated (this is for calculating the scale\r\n        intensity)\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scaleMultiplier</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.03`</TableCell>\r\n      <TableCell>The intensity of the card to scale</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollOptons</TableCell>\r\n      <TableCell>`UseScrollOptions`</TableCell>\r\n      <TableCell>`{offset: [\"start start\", \"end end\"]}`</TableCell>\r\n      <TableCell>Scroll options for `useScroll` hook from `motion`.</TableCell>\r\n    </TableRow>\r\n     <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>`className` for the container</TableCell>\r\n    </TableRow>\r\n     <TableRow>\r\n      <TableCell>Other Props</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>All attributes for `HTMLDivElement`</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n### StackingCardItem\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        index<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>\r\n        `index` value of your card (to calculate scale intensity)\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>topPosition</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`5 + index * 3`</TableCell>\r\n      <TableCell>The top position of the card</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>`className` for the `StackingCardItem` element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>Other Props</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>All attributes for `HTMLDivElement`</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/blocks/sticky-footer",
      "title": "Sticky Footer",
      "description": "A demo showcasing a footer that sticks to the bottom of the page.",
      "content": "\r\n\r\n<ComponentPreview name=\"sticky-footer-demo\" />\r\n\r\n## How to\r\n\r\nThis page doesn't contain a component, as achieving a sticky footer doesn't require any complex logic abstracted into a component. Some tutorials tend to overcomplicate this, but for most cases, it's enough to add a few Tailwind classes to our elements, which you can find in this demo.\r\n\r\nYou need two things to make this work:\r\n\r\n- A main element that will sit on top of the footer\r\n- A footer element that will be behind the main element\r\n\r\n1. Usually, you want the main element to be **at least** `h-[100vh]` (or `h-[100%]` if you use it inside a container, like in the demo above), so that it fully hides the footer by default\r\n2. You also need to set the position to `relative`, so the z-index will work correctly\r\n3. Then, set the footer element's position to `sticky` and make it stick to the bottom with `bottom-0`\r\n4. Finally, make sure that the main element has a higher z-index than the footer element so it always sits on top of the footer\r\n\r\nThat's it! Can you believe that?\r\n\r\n## Notes\r\n\r\nThe main drawback to be aware of is that the footer element will always be behind the main content in the viewport. This can occasionally interfere with pointer events and components that rely on z-index stacking. However, in my experience this approach works well for most common use cases.\r\n"
    },
    {
      "slug": "components/carousel/box-carousel",
      "title": "Box Carousel",
      "description": "A 3D carousel component that displays items in a rotating box/cube layout with drag support and smooth animations.",
      "content": "\r\n\r\n<ComponentPreview name=\"box-carousel-demo\" framerLink=\"https://framer.university/resources/3d-box-carousel-in-framer\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/box-carousel.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"box-carousel\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nThe Box Carousel creates a 3D rotating cube effect where each face displays a different item from your collection. You can navigate through items using mouse/touch drag, keyboard arrows, or control it via ref.\r\n\r\nYou need to pass an items array with at least 4 items, as well as the desired width and height of your items.\r\n\r\n<CodeSnippet title=\"High-level example\">\r\n```tsx\r\nfunction MyCarousel() {\r\n  return (\r\n    <BoxCarousel\r\n      items={items}\r\n      width={400}\r\n      height={300}\r\n      direction=\"right\"\r\n      enableDrag={true}\r\n    />\r\n  )\r\n}\r\n```\r\n</CodeSnippet>\r\n\r\n## Understanding the Component\r\n\r\nThe component constructs a 3D box using four faces positioned with CSS transforms. The order of the faces depends on the rotation direction, which will be important when we update the item indices. In the following snippet you can follow through the order when the rotation direction is `left`. If you want to dive deeper into how these transforms work, check out the <Link href=\"/docs/components/blocks/css-box\">CSS Box documentation</Link>.\r\n\r\n<CodeSnippet title=\"Face positioning\">\r\n```tsx\r\nconst faceTransforms = (() => {\r\n  switch (direction) {\r\n    case \"left\":\r\n      return [\r\n        `rotateY(-90deg) translateZ(${width / 2}px)`,  // left face\r\n        `rotateY(0deg) translateZ(${depth / 2}px)`,    // front face\r\n        `rotateY(90deg) translateZ(${width / 2}px)`,   // right face\r\n        `rotateY(180deg) translateZ(${depth / 2}px)`,  // back face\r\n      ]\r\n    // ... other directions\r\n  }\r\n})()\r\n```\r\n</CodeSnippet>\r\n\r\nThe `depth` is calculated based on the rotation direction - for horizontal rotations (left/right), it uses the width, and for vertical rotations (top/bottom), it uses the height. This means all items are constrained to the same aspect ratio:\r\n\r\n<CodeSnippet title=\"Depth\">\r\n```tsx\r\nconst depth = useMemo(\r\n  () => (direction === \"top\" || direction === \"bottom\" ? height : width),\r\n  [direction, width, height]\r\n)\r\n```\r\n</CodeSnippet>\r\n\r\n### Rotation\r\n\r\nThe component uses Motion's `useMotionValue` for control over rotations. For each rotation, we just add or subtract 90 degrees:\r\n\r\n<CodeSnippet title=\"Motion values\">\r\n```tsx\r\n//...\r\n\r\nconst baseRotateX = useMotionValue(0)  // For vertical rotations\r\nconst baseRotateY = useMotionValue(0)  // For horizontal rotations\r\n\r\n//...\r\n\r\n// Rotate to next face when direction is left\r\n} else if (direction === \"left\") {\r\n  animate(baseRotateY, currentRotation - 90, {\r\n    ..._transition,\r\n    onComplete: () => {\r\n      handleAnimationComplete(\"next\")\r\n      setCurrentRotation(currentRotation - 90)\r\n    },\r\n  })\r\n}\r\n//...\r\n```\r\n</CodeSnippet>\r\n\r\nThen, we just transform these motion values to a CSS transform and use it on the whole box container.\r\n\r\n<CodeSnippet title=\"3D transform\">\r\n```tsx\r\n//...\r\n\r\nconst transform = useTransform(\r\n  isDragging.current ? [springRotateX, springRotateY] : [baseRotateX, baseRotateY],\r\n  ([x, y]) => `translateZ(-${depth / 2}px) rotateX(${x}deg) rotateY(${y}deg)`\r\n)\r\n\r\n//...\r\n\r\n<motion.div\r\n  className=\"relative w-full h-full [transform-style:preserve-3d]\"\r\n  style={{\r\n    transform: transform,\r\n  }}\r\n>\r\n```\r\n</CodeSnippet>\r\n\r\n### Item Management\r\n\r\nThe component maintains four item indices to track which items are displayed on each face. The first face (at `prevIndex`) is, by default, the last item in our items array. The second face is the current camera-facing item, which is the first item in our array. The third face is the next item in our array, and the fourth face (backward-facing face) is the next item after the next item in our array.\r\n\r\n<CodeSnippet title=\"Item indices\">\r\n```ts\r\nconst [prevIndex, setPrevIndex] = useState(items.length - 1)     // Face 0\r\nconst [currentIndex, setCurrentIndex] = useState(0)             // Face 1 (visible)\r\nconst [nextIndex, setNextIndex] = useState(1)                   // Face 2\r\nconst [afterNextIndex, setAfterNextIndex] = useState(2)         // Face 3\r\n```\r\n</CodeSnippet>\r\n\r\nIf our carousel only had 4 items, we could leave these indices as-is. However, with more than 4 items, we need to update the indices after each rotation so that the correct items are always displayed on each face—even after several rotations.\r\n\r\nIn practice, only the index for the backward-facing face needs to be updated after a rotation; the other three faces remain consistent. The function that handles this may look a bit tricky at first, but the logic is straightforward: after each rotation, we determine which face is now at the back and update its index to point to the next appropriate item in the array.\r\n\r\n<CodeSnippet title=\"Update item indices\">\r\n```ts\r\nconst handleAnimationComplete = useCallback(\r\n  (triggeredBy: string) => {\r\n    if (isRotating.current && pendingIndexChange.current !== null) {\r\n      isRotating.current = false\r\n\r\n      let newFrontFaceIndex: number\r\n      let currentBackFaceIndex: number\r\n\r\n      if (triggeredBy === \"next\") {\r\n        newFrontFaceIndex = (currentFrontFaceIndex + 1) % 4\r\n        currentBackFaceIndex = (newFrontFaceIndex + 2) % 4\r\n      } else {\r\n        newFrontFaceIndex = (currentFrontFaceIndex - 1 + 4) % 4\r\n        currentBackFaceIndex = (newFrontFaceIndex + 3) % 4\r\n      }\r\n\r\n      setCurrentItemIndex(pendingIndexChange.current)\r\n      onIndexChange?.(pendingIndexChange.current)\r\n\r\n      const indexOffset = triggeredBy === \"next\" ? 2 : -1\r\n\r\n      if (currentBackFaceIndex === 0) {\r\n        setPrevIndex(\r\n          (pendingIndexChange.current + indexOffset + items.length) %\r\n            items.length\r\n        )\r\n      } else if (currentBackFaceIndex === 1) {\r\n        setCurrentIndex(\r\n          (pendingIndexChange.current + indexOffset + items.length) %\r\n            items.length\r\n        )\r\n      } else if (currentBackFaceIndex === 2) {\r\n        setNextIndex(\r\n          (pendingIndexChange.current + indexOffset + items.length) %\r\n            items.length\r\n        )\r\n      } else if (currentBackFaceIndex === 3) {\r\n        setAfterNextIndex(\r\n          (pendingIndexChange.current + indexOffset + items.length) %\r\n            items.length\r\n        )\r\n      }\r\n\r\n      pendingIndexChange.current = null\r\n      rotationCount.current++\r\n\r\n      setCurrentFrontFaceIndex(newFrontFaceIndex)\r\n    }\r\n  },\r\n[currentFrontFaceIndex, items.length, onIndexChange]\r\n)\r\n```\r\n</CodeSnippet>\r\n\r\n### Drag Interaction\r\n\r\nThe component supports drag interaction. In the following function you can see that we're modifying the base rotation values based on the delta of the mouse/touch position:\r\n\r\n<CodeSnippet title=\"Drag handling\">\r\n```ts\r\nconst handleDragMove = useCallback(\r\n  (e: MouseEvent | TouchEvent) => {\r\n    if (!isDragging.current || isRotating.current) return\r\n\r\n    const point = \"touches\" in e ? e.touches[0] : e\r\n    const deltaX = point.clientX - startPosition.current.x\r\n    const deltaY = point.clientY - startPosition.current.y\r\n\r\n    const isVertical = direction === \"top\" || direction === \"bottom\"\r\n    const delta = isVertical ? deltaY : deltaX\r\n    const rotationDelta = (delta * dragSensitivity) / 2\r\n\r\n    let newRotation = startRotation.current\r\n\r\n    if (direction === \"top\" || direction === \"right\") {\r\n      newRotation += rotationDelta\r\n    } else {\r\n      newRotation -= rotationDelta\r\n    }\r\n\r\n    // Constrain rotation to +/-120 degrees from start position. Otherwise the index recalculation will be off. TBD - find a better solution\r\n    const minRotation = startRotation.current - 120\r\n    const maxRotation = startRotation.current + 120\r\n    newRotation = Math.max(minRotation, Math.min(maxRotation, newRotation))\r\n\r\n    // Apply the rotation immediately during drag\r\n    if (isVertical) {\r\n      baseRotateX.set(newRotation)\r\n    } else {\r\n      baseRotateY.set(newRotation)\r\n    }\r\n  },\r\n  [enableDrag, direction, dragSensitivity]\r\n)\r\n```\r\n</CodeSnippet>\r\n\r\nWhen the drag interaction is released, the carousel will snap back to the nearest 90-degree increment:\r\n\r\n<CodeSnippet title=\"Drag snap\">\r\n```ts\r\nconst handleDragEnd = useCallback(() => {\r\n  if (!isDragging.current) return\r\n\r\n  isDragging.current = false\r\n\r\n  const isVertical = direction === \"top\" || direction === \"bottom\"\r\n  const currentValue = isVertical ? baseRotateX.get() : baseRotateY.get()\r\n\r\n  // Calculate the nearest quarter rotation (90-degree increment)\r\n  const quarterRotations = Math.round(currentValue / 90)\r\n  const snappedRotation = quarterRotations * 90\r\n\r\n  // Calculate how many steps we've moved from the original position\r\n  const rotationDifference = snappedRotation - currentRotation\r\n  const steps = Math.round(rotationDifference / 90)\r\n\r\n  if (steps !== 0) {\r\n    isRotating.current = true\r\n\r\n    // Calculate new item index\r\n    let newItemIndex = currentItemIndex\r\n    for (let i = 0; i < Math.abs(steps); i++) {\r\n      if (steps > 0) {\r\n        newItemIndex = (newItemIndex + 1) % items.length\r\n      } else {\r\n        newItemIndex =\r\n          newItemIndex === 0 ? items.length - 1 : newItemIndex - 1\r\n      }\r\n    }\r\n\r\n    pendingIndexChange.current = newItemIndex\r\n\r\n    // Animate to the snapped position\r\n    const targetMotionValue = isVertical ? baseRotateX : baseRotateY\r\n    animate(targetMotionValue, snappedRotation, {\r\n      ...snapTransition,\r\n      onComplete: () => {\r\n        handleAnimationComplete(steps > 0 ? \"next\" : \"prev\")\r\n        setCurrentRotation(snappedRotation)\r\n      },\r\n    })\r\n  } else {\r\n    // Snap back to current position\r\n    const targetMotionValue = isVertical ? baseRotateX : baseRotateY\r\n    animate(targetMotionValue, currentRotation, snapTransition)\r\n  }\r\n}, [\r\n  direction,\r\n  baseRotateX,\r\n  baseRotateY,\r\n  currentRotation,\r\n  currentItemIndex,\r\n  items.length,\r\n  transition,\r\n  handleAnimationComplete,\r\n])\r\n```\r\n</CodeSnippet>\r\n\r\nYou can customize the snap transition by passing in a custom value for `snapTransition` prop. The default value is `{ type: \"spring\", damping: 30, stiffness: 200 }`.\r\n\r\nYou can also customize the drag sensitivity and spring physics by passing in custom values for `dragSensitivity` and `dragSpring` props. The default values are `0.5` and `{ stiffness: 200, damping: 30 }` respectively.\r\n\r\nAn important note here is that the drag rotation is constrained to a +/- 120 degree range for the sake of simplicity. Otherwise we would need to re-order the whole items array to keep the correct ordering of items after a huge rotation.\r\nFeel free to open a PR if you'd like to fix this :).\r\n\r\n### Auto-play Mode\r\n\r\nYou can enable automatic progression through items with the `autoPlay` prop:\r\n\r\n<ComponentPreview name=\"box-carousel-autoplay-demo\" />\r\n\r\n### Keyboard Navigation\r\n\r\nThe component includes full keyboard support when the carousel is in focus:\r\n\r\n- **Arrow keys**: Navigate based on rotation direction\r\n  - Left/Right arrows work for `left`/`right` directions\r\n  - Up/Down arrows work for `top`/`bottom` directions\r\n\r\n### Mixed Media Support\r\n\r\nSupports both images and videos with different handling:\r\n\r\n<ComponentPreview name=\"box-carousel-video-demo\" />\r\n\r\nVideos automatically play with `muted`, `loop`, and `autoPlay` attributes. If you need more custom controls here, modify the `MediaRenderer` component.\r\n\r\n### Imperative API\r\n\r\nYou can access carousel controls programmatically using a ref. This can be handy when you want to trigger a rotation via buttons, just like in the first demo on the page:\r\n\r\n<CodeSnippet title=\"Ref usage\">\r\n```tsx\r\nfunction MyComponent() {\r\n  const carouselRef = useRef<BoxCarouselRef>(null)\r\n\r\n  const handleNext = () => {\r\n    carouselRef.current?.next()\r\n  }\r\n\r\n  const handlePrev = () => {\r\n    carouselRef.current?.prev()\r\n  }\r\n\r\n  const getCurrentIndex = () => {\r\n    return carouselRef.current?.getCurrentItemIndex() ?? 0\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <BoxCarousel ref={carouselRef} items={items} width={400} height={300} />\r\n      <button onClick={handleNext}>Next</button>\r\n      <button onClick={handlePrev}>Previous</button>\r\n    </>\r\n  )\r\n}\r\n```\r\n</CodeSnippet>\r\n\r\n### Reduced Motion Support\r\n\r\nThe component automatically respects user preferences for reduced motion by setting transition duration to 0 when `prefers-reduced-motion` is detected. The drag interaction remains intact, though.\r\n\r\n## Credits\r\n\r\nYou can find the links for each artwork used in the demo [here](https://www.cosmos.so/danielpetho/box-carousel-demo).\r\n\r\nPorted to Framer by [Framer University](https://framer.university/)\r\n\r\n## Resources\r\n\r\n- [Intro to CSS 3D transforms](https://3dtransforms.desandro.com/) by David DeSandro\r\n- <Link href=\"/docs/components/blocks/css-box\">CSS Box</Link>\r\n- [Flickity](https://flickity.metafizzy.co/) by MetaFizzy\r\n\r\n## Props\r\n\r\n### BoxCarousel Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        items<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`CarouselItem[]`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Array of items to display in the carousel</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>\r\n        width<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Width of the carousel in pixels</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>\r\n        height<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Height of the carousel in pixels</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for the container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>direction</TableCell>\r\n      <TableCell>`\"top\" | \"bottom\" | \"left\" | \"right\"`</TableCell>\r\n      <TableCell>`\"left\"`</TableCell>\r\n      <TableCell>The axis and direction of rotation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>perspective</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`600`</TableCell>\r\n      <TableCell>CSS perspective value for 3D effect depth</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>debug</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Enable debug mode to visualize cube faces</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`ValueAnimationOptions`</TableCell>\r\n      <TableCell>`{ duration: 1.25, ease: [0.953, 0.001, 0.019, 0.995] }`</TableCell>\r\n      <TableCell>Animation options for programmatic rotations</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>snapTransition</TableCell>\r\n      <TableCell>`ValueAnimationOptions`</TableCell>\r\n      <TableCell>`{ type: \"spring\", damping: 30, stiffness: 200 }`</TableCell>\r\n      <TableCell>Animation options for drag snap-back</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragSpring</TableCell>\r\n      <TableCell>`SpringConfig`</TableCell>\r\n      <TableCell>`{ stiffness: 200, damping: 30 }`</TableCell>\r\n      <TableCell>Spring physics configuration for drag interactions</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>autoPlay</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Enable automatic progression through items</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>autoPlayInterval</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`3000`</TableCell>\r\n      <TableCell>Interval in milliseconds for auto-play</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>enableDrag</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Enable drag interaction for navigation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>dragSensitivity</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.5`</TableCell>\r\n      <TableCell>Sensitivity multiplier for drag movement</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onIndexChange</TableCell>\r\n      <TableCell>`(index: number) => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback fired when the active item changes</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n### BoxCarousel Ref Methods\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Method</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>goTo</TableCell>\r\n      <TableCell>`(index: number) => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Programmatically go to a specific item index</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>next</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Advance to the next item</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>prev</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Go to the previous item</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>getCurrentItemIndex</TableCell>\r\n      <TableCell>`() => number`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Get the current active item index</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>"
    },
    {
      "slug": "components/filter/gooey-svg-filter",
      "title": "Gooey SVG Filter",
      "description": "An svg filter component that creates a gooey effect on the background. Can be used to create fluid interfaces or rounded-at-all-corners panels. Limited support for Safari.",
      "content": "\r\n\r\n<ComponentPreview name=\"gooey-svg-filter-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/gooey-svg-filter.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"gooey-svg-filter\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nAdd the `GooeySvgFilter` component to your project, pass an `id` prop to the component (optional), then use the same `id` prop in the `filter` CSS property of the container you want to apply the filter to. High-level example:\r\n\r\n<CodeSnippet title=\"Goeey SVG Filter Example\">\r\n```tsx\r\n<GooeySvgFilter id=\"gooey-filter\" />\r\n<div style={{ filter: \"url(#gooey-filter)\" }}>\r\n filter will be applied here\r\n</div>\r\n```\r\n</CodeSnippet>\r\n\r\n## Understanding the component\r\n\r\nThe filter is surprisingly simple. First, we apply a blur, which makes closer element to 'bleed' or blur into each other. Then, we just increase the contrast of our alpha channel with a color matrix. Lastly, we composite these two layers together with an `atop` operator, which will mask out anything outside the filter.  \r\n\r\nPlease refer to [this article](https://css-tricks.com/gooey-effect/) by [Lucas Bebber](https://lbebber.github.io/public/) for more details. The entire component is derived from this work, and Lucas does a much better job explaining the filter than I do:).\r\n\r\n## Examples\r\n\r\n### Fluid interface\r\n\r\n<ComponentPreview name=\"gooey-svg-filter-menu-demo\" />\r\n\r\n### Rounded corners\r\n\r\nThe following example combines the [PixelTrail](/docs/components/background/pixel-trail) component with this svg filter to create a rounded-at-all-corners effect. Unfortunately, the component doesn't support Safari, so you'll need to create a fallback for that.\r\n\r\n<ComponentPreview name=\"gooey-svg-filter-pixel-trail-demo\" />\r\n\r\n## Notes\r\n\r\n- Safari support for SVG filters is still very limited, so make sure to check compatibility, and create fallbacks (in the demos above, you can also see that the motion is disabled for Safari). For a fully supported solution, your best bet is to create a shader instead. Let us know if you would like to see a component for that!\r\n- Keep a large enough space for the filter to avoid clipping.\r\n\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>id</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The id of the filter</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>strength</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`15`</TableCell>\r\n      <TableCell>The strength of the gooey effect</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n  </Table>\r\n\r\n  ## Credits\r\n\r\n  The component is derived from [this article](https://css-tricks.com/gooey-effect/) by [Lucas Bebber](https://lbebber.github.io/public/).\r\n"
    },
    {
      "slug": "components/filter/pixelate-svg-filter",
      "title": "Pixelate SVG Filter",
      "description": "A filter component that applies a pixelation effect with an SVG filter. Safari is not supported.",
      "content": "\r\n\r\n<ComponentPreview name=\"pixelate-svg-filter-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/pixelate-svg-filter.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"pixelate-svg-filter\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nAdd the `PixelateSvgFilter` component to your project, pass an `id` prop to the component (optional), then use the same `id` prop in the `filter` CSS property of the container you want to apply the filter to. High-level example:\r\n\r\n<CodeSnippet title=\"Pixelate SVG Filter Example\">\r\n```tsx\r\n<PixelateSvgFilter id=\"pixelate-filter\" />\r\n<div style={{ filter: \"url(#pixelate-filter)\" }}>\r\n filter will be applied here\r\n</div>\r\n```\r\n</CodeSnippet>\r\n\r\n## Understanding the component\r\n\r\nThe pixelation effect is achieved using SVG filters. The process works in three steps:\r\n\r\n1. The filter divides the input into a grid using `feFlood` and `feComposite` operations, where each cell represents a future \"pixel\"\r\n2. The `feTile` operation repeats this grid pattern across the entire target area\r\n3. Finally, `feColorMatrix` and `feComposite` are used to blend the original image with the grid, creating the pixelated effect\r\n\r\nThe component accepts two optional props to customize the pixelation effect:\r\n\r\n- `size` (default: 16): Controls the size of each \"pixel\" in the resulting effect. A larger value creates a more blocky appearance, while a smaller value produces finer pixelation.\r\n\r\n- `crossLayers` (default: false): When enabled, adds two additional filter layers that help prevent visual artifacts:\r\n  - A second layer that ensures full-width coverage by using half-width pixels\r\n  - A third layer that ensures full-height coverage by using half-height pixels\r\n  \r\n  This is particularly useful when applying dynamic filters where the target area's dimensions may not perfectly align with the pixel grid, preventing unwanted \"jumpiness\" in the effect.\r\n\r\nPlease have a look at the following [thread](https://stackoverflow.com/questions/37451189/can-one-pixelate-images-with-an-svg-filter) for more details. Props to the folks who shared their insights and code!\r\n\r\n## Examples\r\n\r\n### Text\r\n\r\nThe filter can be applied to text as well. Hit the refresh button to see the effect.\r\n\r\n<ComponentPreview name=\"pixelate-svg-filter-text\" />\r\n\r\n## Notes\r\n\r\nSafari is unfortunately not supported. If you have any suggestions or ideas for how to make this component work with it, please let us know!\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>id</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`\"pixelate-filter\"`</TableCell>\r\n      <TableCell>The ID of the filter</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>size</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`16`</TableCell>\r\n      <TableCell>The size of each pixel in the resulting effect</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>crossLayers</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to add two additional filter layers</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n## Credits\r\n\r\nThe effect is derived from multiple people's work from this [thread](https://stackoverflow.com/questions/37451189/can-one-pixelate-images-with-an-svg-filter)."
    },
    {
      "slug": "components/image/image-trail",
      "title": "Image Trail",
      "description": "A component that creates a trail effect on cursor/touch movement. Works also with videos, svgs, or any type of html elements.",
      "content": "\r\n\r\n<ComponentPreview name=\"image-trail-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/image-trail.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"image-trail\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Introduction\r\n\r\nThis component is a fun mouse interaction effect. The idea is to follow the mouse and show a trail of random images. It's a kind of brutalist effect and there are various possibilities when it comes to showing and hiding the images.\r\n\r\n## Usage\r\n\r\nWrap each image with the `ImageTrailItem` component and wrap everything with the `ImageTrail` as a parent component.\r\n\r\n<CodeSnippet title=\"Image trail usage example\">\r\n```tsx\r\n<ImageTrail>\r\n  <ImageTrailItem>...</ImageTrailItem>\r\n  <ImageTrailItem>...</ImageTrailItem>\r\n  <ImageTrailItem>...</ImageTrailItem>\r\n</ImageTrail>\r\n```\r\n</CodeSnippet>\r\n\r\n## Understanding the component\r\n\r\nThe `ImageTrail` component creates its effect by tracking the mouse (or touch) position and animating a series of child elements (`ImageTrailItem`) to follow that movement with a configurable delay and visual style.\r\n\r\n### How the Trail Follows the Cursor\r\n\r\n1.  **Tracking Position:** The component continuously monitors the mouse or touch position.\r\n2.  **Calculating Target Position (Linear Interpolation):** Instead of instantly moving trail items to the current cursor position, it calculates a \"target\" position using linear interpolation (`lerp`). This smooths out the movement.\r\n\r\n<CodeSnippet title=\"Calculating target position\">\r\n    ```tsx\r\n    const lerp = (a: number, b: number, n: number) => (1 - n) * a + n * b\r\n\r\n    //...\r\n\r\n    cachedMousePos.current.x = MathUtils.lerp(\r\n      cachedMousePos.current.x || mousePos.x,\r\n      mousePos.x,\r\n      clampedIntensity\r\n    )\r\n\r\n    cachedMousePos.current.y = MathUtils.lerp(\r\n      cachedMousePos.current.y || mousePos.y,\r\n      mousePos.y,\r\n      clampedIntensity\r\n    )\r\n    ```\r\n</CodeSnippet>\r\n\r\n3.  **Controlling Responsiveness (`intensity`):** The `intensity` prop (a value between 0 and 1) controls how quickly the calculated target position updates to match the actual cursor position.\r\n    *   Lower values (e.g., 0.1) result in a smoother, more delayed \"momentum\" effect, where the trail items lag behind the cursor.\r\n    *   Higher values (e.g., 0.8) make the trail more responsive but less smooth.\r\n    *   An intensity of `1` positions the trail items exactly at the cursor's current position.\r\n\r\n<ComponentPreview name=\"image-trail-instant-demo\" />\r\n\r\n4.  **Triggering Animation (`threshold`):** An animation cycle for the next trail item is only triggered when the cursor moves a certain distance. This distance is calculated using the Pythagorean theorem (`Math.hypot`):\r\n\r\n<CodeSnippet title=\"Calculating distance\">\r\n    ```tsx\r\n    const distance = (x1: number, y1: number, x2: number, y2: number) =>\r\n      Math.hypot(x2 - x1, y2 - y1)\r\n    ```\r\n</CodeSnippet>\r\n\r\n    The `threshold` prop (default: `100` pixels) defines this minimum distance. No new trail items are animated until the cursor has moved at least this far since the last item was triggered.\r\n\r\n### Animating the Trail Items\r\n\r\nWhen the movement threshold is met:\r\n\r\n1.  **Cycling Through Items:** The component activates the next available `ImageTrailItem` in the sequence. By default, it cycles through all children and repeats from the beginning. You can set the `repeatChildren` prop to a number greater than 1 to duplicate the children internally and avoid immediate repetition.\r\n2.  **Making Items Visible:** Trail items are initially hidden (`display: none`). When triggered, the next item is made visible (`display: block`) and starts its animation.\r\n3.  **Animating Position:** The core movement animation uses the `animate` function from `Motion`. Each triggered item animates its `x` and `y` coordinates towards the continuously updating `cachedMousePos` (calculated using `lerp` as described above).\r\n\r\n### Customizing the Visual Animation\r\n\r\nBeyond the position animation, you can control how each `ImageTrailItem` visually appears and disappears using the `keyframes` and `keyframesOptions` props passed to the main `ImageTrail` component.\r\n\r\n*   **`keyframes`:** Define the states of the animation (e.g., scale, opacity). You should define the initial state (how the element appears) and the final state (how it disappears).\r\n*   **`keyframesOptions`:** Fine-tune the timing, duration, and easing for the properties defined in `keyframes`. The `times` array within options specifies the progress points (0 to 1) at which each keyframe state should be reached.\r\n\r\n**Example:**\r\n\r\n<CodeSnippet title=\"Custom keyframes\">\r\n```tsx\r\nkeyframes={{ scale: [0, 1, 1, 0], opacity: [0, 1, 1, 0] }}\r\nkeyframesOptions={{\r\n  duration: 0.6, // Total duration for one item's animation\r\n  scale: { times: [0, 0.1, 0.7, 1] }, // Scale keyframe timings\r\n  opacity: { times: [0, 0.1, 0.7, 1] }, // Opacity keyframe timings\r\n}}\r\n```\r\n</CodeSnippet>\r\n\r\nIn this example:\r\n*   The item starts invisible (`opacity: 0`, `scale: 0`).\r\n*   At 10% of the duration (`0.06s`), it quickly scales up and fades in (`opacity: 1`, `scale: 1`).\r\n*   It remains fully visible until 70% of the duration (`0.42s`).\r\n*   From 70% to 100% (`0.42s` to `0.6s`), it scales down and fades out back to the initial state (`opacity: 0`, `scale: 0`).\r\n\r\nThere must be the same number of values in a `times` array as there are keyframes for that property. If `times` is omitted, the keyframes are spread evenly across the `duration`. You can read more about this in the [Motion docs](https://motion.dev/docs/animate#times).\r\n\r\nThe component reuses DOM elements rather than creating new ones for each animation. It maintains a fixed set of `ImageTrailItem` elements that get recycled as needed. When an item needs to be triggered again, the component updates its position and restarts the animation without having to remove and remount elements in the DOM. For this recycling to work properly, make sure to define both initial and final states in the `keyframes` prop, as explained in the example above.\r\n\r\n### Z Index Stacking\r\n\r\nThe component automatically manages the `z-index` of the trail items to control their stacking order. You can customize this behavior using two props:\r\n\r\n- `zIndexDirection`: Controls whether newer or older items should appear on top\r\n  - `\"new-on-top\"` (default): The most recently triggered item will have the highest z-index\r\n  - `\"old-on-top\"`: The oldest items stay on top, with new items appearing underneath\r\n\r\n- `baseZIndex`: Sets the starting z-index value (defaults to 0)\r\n\r\nWhen a new item is triggered, the component maintains proper stacking by:\r\n- For `\"new-on-top\"`: Setting the current item to the highest z-index and shifting all others down by 1\r\n- For `\"old-on-top\"`: Setting the current item to the lowest z-index (baseZIndex) and shifting all others up by 1\r\n\r\nExample with `zIndexDirection=\"old-on-top\"`:\r\n\r\n<ComponentPreview name=\"image-trail-zindex-demo\" />\r\n\r\nThat's it! :)\r\n\r\n### Non-image elements\r\n\r\nThe component is not constrained to be used with images, you can wrap videos, svgs, or basically any HTML elements inside a `ImageTrailItem`.\r\n\r\n<ComponentPreview name=\"image-trail-various-elements-demo\" />\r\n\r\n## Notes\r\n\r\n- The `ImageTrailItem` component assigns a default className of `.image-trail-item` to identify elements for animation within the `ImageTrail` component. Be cautious when applying custom `className` values with the same name (`.image-trail-item`) in your application, as this may cause conflicts or unintended behavior due to duplicate class selectors. To avoid issues, ensure custom classes are unique or use the `className` prop to extend styles without overriding the default `.image-trail-item` class.\r\n\r\n- When using the `ImageTrail` component, content is heavily animated. To prevent performance issues, avoid using overly large images or videos.\r\n\r\n## Props\r\n\r\n### Image Trail Wrapper\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        children<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>threshold</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`100`</TableCell>\r\n      <TableCell>How much distance in pixels the mouse has to travel to trigger an element to appear</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`div`</TableCell>\r\n      <TableCell>HTML Tag</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>intensity</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.3`</TableCell>\r\n      <TableCell>The intensity for the momentum movement after showing the element. The value will be clamped greater than 0 and less than or equal to 1.0</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>keyframes</TableCell>\r\n      <TableCell>`DOMKeyframesDefinition`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Animation Keyframes for defining the animation sequence. Example: `{ scale: [0, 1, 1, 0] }`</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>keyframesOptions</TableCell>\r\n      <TableCell>`AnimationOptions`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Options for the animation/keyframes. Example: `{ duration: 1, times: [0, 0.1, 0.9, 1] }`</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>trailElementAnimationKeyframes</TableCell>\r\n      <TableCell>`{ x?: AnimationOptions, y?: AnimationOptions }`</TableCell>\r\n      <TableCell>`{ x: { duration: 1, type: \"tween\", ease: \"easeOut\" }, y: { duration: 1, type: \"tween\", ease: \"easeOut\" } }`</TableCell>\r\n      <TableCell>Animation keyframes for the x and y positions after showing the element. Describes how the element should try to arrive at the mouse position</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>repeatChildren</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`3`</TableCell>\r\n      <TableCell>The number of times the children will be repeated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>baseZIndex</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>The base zIndex for all elements</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>zIndexDirection</TableCell>\r\n      <TableCell>`\"new-on-top\" | \"old-on-top\"`</TableCell>\r\n      <TableCell>`\"new-on-top\"`</TableCell>\r\n      <TableCell>Controls stacking order behavior. \"new-on-top\": newer elements stack above older ones, \"old-on-top\": older elements stay visually on top</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS class names</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n### Image Trail Item\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        children<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`div`</TableCell>\r\n      <TableCell>HTML Tag</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS class names</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>"
    },
    {
      "slug": "components/image/parallax-floating",
      "title": "Parallax Floating",
      "description": "A component that creates a parallax floating effect on cursor/touch movement. Works also with videos, svgs, or any type of html elements.",
      "content": "\r\n\r\n<ComponentPreview name=\"parallax-floating-demo\" framerLink=\"https://framer.university/resources/parallax-floating-effect-in-framer\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/parallax-floating.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nCreate a hook for querying the cursor position:\r\n\r\n<ComponentSource name=\"use-mouse-position\" />\r\n\r\nThen copy and paste the following code into your project:\r\n\r\n<ComponentSource name=\"parallax-floating\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nThere are two components exported from the source file: `Floating` and `FloatingElement`. The first one is a wrapper component that takes care of the animation, mouse position tracking and other logic. The second one is a component that you **must** use to wrap any elements you want to float.\r\n\r\n<CodeSnippet title=\"Floating Example\">\r\n```tsx\r\n<Floating>\r\n  <FloatingElement depth={0.5}>\r\n    <div className=\"absolute top-1/2 left-1/4 bg-red-500\" />\r\n  </FloatingElement>\r\n  <FloatingElement depth={1}>\r\n    <div className=\"absolute top-1/2 left-2/4 bg-green-500\" />\r\n  </FloatingElement>\r\n  <FloatingElement depth={2}>\r\n    <div className=\"absolute top-1/2 left-3/4 bg-blue-500\" />\r\n  </FloatingElement>\r\n</Floating>\r\n```\r\n</CodeSnippet>\r\n\r\nThe advantage of this setup is that you can style and position your elements however you want using Tailwind classes or custom CSS directly on the `FloatingElement` component, while the `Floating` wrapper component handles all the complex animation logic. Simply wrap your positioned elements with `FloatingElement`, set their `depth` value, and the floating effect will be applied while maintaining your original styling and positioning.\r\n\r\n## Understanding the component\r\n\r\nIf you're curious how it works, here's a quick overview of the component's internals:\r\n\r\n1. **Element Registration**: Using React Context, each `FloatingElement` child registers itself with the parent `Floating` component, providing its DOM reference and depth value.\r\n\r\n2. **Mouse Position Tracking**: The component tracks mouse movement across the screen using a custom hook that provides normalized coordinates relative to the container.\r\n\r\n3. **Animation Loop**: Using Framer Motion's `useAnimationFrame`, the component runs a continuous animation loop that:\r\n\r\n   - Calculates the target position for each element based on the mouse coordinates\r\n   - Applies linear interpolation (lerp) to smoothly transition elements to their new positions\r\n   - Updates the transform property of each element using CSS transforms\r\n\r\n4. **Strength**: The floating effect is customized through two main factors:\r\n   - Individual `depth` values on each `FloatingElement` determine how far that element moves. The higher the depth, the farther the element will move.\r\n   - The global `sensitivity` prop controls the overall intensity of the movement\r\n5. **Lerp**: The `easingFactor` prop determines how quickly elements move toward their target positions - lower values create smoother, more gradual movements while higher values create snappier responses.\r\n\r\n## Notes\r\n\r\n### Z-Index Management\r\n\r\nThe `Floating` component focuses solely on movement animation and does not handle z-index stacking. You'll need to manually set appropriate z-index values on your `FloatingElement` components to achieve the desired layering effect. The `depth` prop only controls the intensity of the floating movement, not the visual stacking order.\r\n\r\n### Performance Optimization\r\n\r\nFor better performance when dealing with multiple floating elements, you can use a grouping strategy:\r\n\r\n1. Instead of creating individual `FloatingElement` components for each item, group related items under a single `FloatingElement`\r\n2. All children of a `FloatingElement` will move together with the same depth value\r\n3. This reduces the number of elements being calculated and transformed\r\n\r\nFor example, if you have 6 floating images, instead of creating 6 separate `FloatingElement` components, you could group them into 3 pairs. This reduces the animation calculations from 6 to 3.\r\n\r\n### Directional Control\r\n\r\nWith the `depth` and `sensitivity` props, you can control the direction, and strength of the floating effect:\r\n\r\n- **Positive Values**: Elements move toward the mouse cursor\r\n\r\n  - Higher values create stronger movement\r\n  - Example: `depth={2}` moves twice as far as `depth={1}`\r\n\r\n- **Negative Values**: Elements move away from the mouse cursor\r\n  - Creates an inverse floating effect\r\n  - Example: `depth={-1}` moves in the opposite direction of the mouse\r\n\r\n## Credits\r\n\r\nPorted to Framer by [Framer University](https://framer.university/)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        children<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>sensitivity</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.1`</TableCell>\r\n      <TableCell>The sensitivity of the movement</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>easingFactor</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.05`</TableCell>\r\n      <TableCell>The easing factor of the movement</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n### FloatingElement\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        children<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>depth</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`1`</TableCell>\r\n      <TableCell>The depth of the element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/physics/cursor-attractor-and-gravity",
      "title": "Cursor Attractor & Gravity",
      "description": "A set of wrapper components for creating physics-based attractors and gravity animations with Matter.js.",
      "content": "\r\n\r\n<ComponentPreview\r\n  name=\"cursor-attractor-and-gravity-demo\"\r\n  framerLink=\"https://framer.university/resources/cursor-attract-component-for-framer\"\r\n/>\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs\r\n  command='shadcn@latest add \"https://fancycomponents.dev/r/cursor-attractor-and-gravity.json\"'\r\n  npx\r\n/>\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nInstall the following dependencies:\r\n\r\n<InstallTabs command=\"matter-js @types/matter-js poly-decomp\" />\r\n\r\nThen, create an utility function for parsing SVG paths into a set of vertices:\r\n\r\n<ComponentSource name=\"svg-path-to-vertices\" />\r\n\r\nThe other is for calculating the position of an element based on its container, and a posiiton value\r\n\r\n<ComponentSource name=\"calculate-position\" />\r\n\r\nAnd another one for calculating the position of an element based on its container, and a posiiton value:\r\n\r\n<ComponentSource name=\"cursor-attractor-and-gravity\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nFirst, you need to wrap your scene / content with the `Gravity` component. Set the attraction point coordinates in the `attractorPoint` prop. This point will either attract or repel all the bodies inside the container. Then, in order to transform your regular HTML elements into Matter bodies, you need to wrap them with the `MatterBody` component.\r\n\r\nYou need to set each bodies `x` and `y` position, either as a percentage of your container size, or as a number. You do not need to set the width and height manually, everything else is taken care of by component :). Lastly, set the strength and radius of the cursor attractor, which will also attract or repell all bodies. High-level example:\r\n\r\n<CodeSnippet title=\"Gravity usage example\">\r\n  ```tsx\r\n  <Gravity\r\n    attractorPoint={{ x: \"50%\", y: \"50%\" }}\r\n    attractorStrength={0.0006}\r\n    cursorStrength={-0.005}\r\n    cursorFieldRadius={200}\r\n  >\r\n    <MatterBody x=\"50%\" y=\"50%\">\r\n      <div>Hello world!</div>\r\n    </MatterBody>\r\n    <MatterBody x=\"10%\" y=\"10%\">\r\n      <div>sesame!</div>\r\n    </MatterBody>\r\n  </Gravity>\r\n  ```\r\n</CodeSnippet>\r\n\r\n## Understanding the component\r\n\r\nPlease refer to the <Link href=\"/docs/components/physics/gravity\">Gravity</Link> documentation, since the component is almost identical. The only difference is that in this component that we don't use a directional gravitational force.Instead, we use attractor force(s), either from a defined static point (optional), and/or from the cursor position, that attract or repel all bodies inside the container. This is achieved by calculating the distance between the attractor point(s) and each body, and applying a force in the opposite direction of the body's velocity. The force is proportional to the distance and inversely proportional to the mass of the body.\r\n\r\n## Examples\r\n\r\n### Repel\r\n\r\nBy setting one of the attractor points' strength to a negative value, you can create a repelling effect. The following demo showcases a negative force from the cursor by applying a negative value to the `cursorStrength` prop.\r\n\r\n<ComponentPreview name=\"cursor-attractor-and-gravity-image-demo\" />\r\n\r\n### SVGs\r\n\r\nYouy can choose `svg` as a `bodyType` for your matter bodies. This is particularly useful for creating custom-shaped physics objects that match your SVG graphics.\r\n\r\nHere's how it works:\r\n\r\n1. The component takes your SVG element and extracts the path data\r\n2. It converts the path into a series of vertices (points) that outline the shape (with a custom converter using the `svg-path-commander` package)\r\n3. These vertices are then converted into polygons by matter.js (with the help of the `poly-decomp` package).\r\n4. The resulting polygons are then used to create Matter.js bodies\r\n\r\n<ComponentPreview name=\"cursor-attractor-and-gravity-svg-demo\" />\r\n\r\nAs you can see in the demo above, SVG bodies can produce varying results. Simple shapes like some of the stars translate well, but some of them are a bit rough.\r\n\r\nThis variance in quality stems from the challenging process of converting SVG paths to physics bodies. Therefore, there are a few caveats to keep in mind:\r\n\r\n1. **SVG Requirements**:\r\n   - Keep them simple. The simpler the SVG, the better the decomposition, and the simulation.\r\n   - It's only tested with single-path SVGs, and it probably won't work with nested paths.\r\n   - Avoid shapes with holes or complex curves, or shapes that are seem to be too complex to decompose into polygons.\r\n\r\n2. **Performance Impact**:\r\n   - Complex SVGs create more detailed physics bodies, which can slow down the simulation\r\n   - More vertices mean more calculations\r\n   - The initial path-to-vertices conversion can be slow.\r\n\r\nIf you're not getting the desired results, you have several options:\r\n\r\n1. Break down complex SVGs into simpler shapes\r\n2. Use basic physics bodies (rectangles/circles) with the SVG as a visual overlay\r\n3. Fine-tune the vertex sampling with the `sampleLength` prop\r\n\r\nYou more than likely will need to experiment with different settings to get the desired results. Use the `debug` prop to visualize the physics bodies and their vertices, and adjust the `sampleLength` prop to control the accuracy of the conversion.\r\n\r\nFor more details on the decomposition process, refer to the [poly-decomp documentation](https://github.com/schteppe/poly-decomp), the [Matter.js documentation](https://brm.io/matter-js/docs/classes/Bodies.html#method_fromVertices), and to the [SVG path commander documentation](https://github.com/thednp/svg-path-commander).\r\n\r\n## Credits\r\n\r\nPorted to Framer by [Framer University](https://framer.university/)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>attractorPoint</TableCell>\r\n      <TableCell>`{ x: number | string; y: number | string }`</TableCell>\r\n      <TableCell>`{ x: 0.5, y: 0.5 }`</TableCell>\r\n      <TableCell>The attractor point coordinates</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>attractorStrength</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.001`</TableCell>\r\n      <TableCell>The strength of the attractor force</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>cursorStrength</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.0005`</TableCell>\r\n      <TableCell>The strength of the cursor force</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>cursorFieldRadius</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`100`</TableCell>\r\n      <TableCell>The radius of the cursor field</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>resetOnResize</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to reset the physics world when the window is resized</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>addTopWall</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to add a wall at the top of the canvas</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>autoStart</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to automatically start the physics simulation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/physics/elastic-line",
      "title": "Elastic Line",
      "description": "A wobbly svg line with a spring cursor interaction.",
      "content": "\r\n\r\n<ComponentPreview name=\"elastic-line-demo\" framerLink=\"https://framer.university/resources/elastic-line-component-for-framer\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/elastic-line.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nCreate a hook for querying the cursor position:\r\n\r\n<ComponentSource name=\"use-mouse-position\" />\r\n\r\nAnd a hook for querying the dimensions of an element:\r\n\r\n<ComponentSource name=\"use-dimensions\" />\r\n\r\nFor better readability, there is another hook for getting the elastic line's control point, and if the line is grabbed or not:\r\n\r\n<ComponentSource name=\"use-elastic-line-events\" />\r\n\r\nThen, copy and paste the component code into your project, and update your imports:\r\n\r\n<ComponentSource name=\"elastic-line\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\nThis component is made with a simple svg quadratic curve, with 2+1 points. The start and end points of the curve positioned at the two edges of the parent container, either horizontally or vertically, depending on the `isVertical` prop. This means, the line will always be centered in the container, and it will always fill up the entire container, so make sure to position your container properly.\r\n\r\nThe third point of the line is the control point, named `Q`, which is positioned at the center of the container by default. When the cursor moves close to the line (within `grabThreshold`), the control point will be controlled by the cursor's position. When the distance between them is greater than the `releaseThreshold` prop, the control point is animated back to the center of the container, with the help of motion's `animate` function.\r\n\r\nFor better readability — the calculation of the control point's position, and the signal it's grabbed — done in a separate hook, called `useElasticLineEvents`.\r\n\r\nTo achiave the elastic effect we use a springy transition by default, but feel free to experiment with other type of animations, easings, durations, etc.\r\n\r\nThe compoment also have an `animateInTransition` prop, which is used when the line is initially rendered. If you want to skip this, just set the transiton's `duration` to `0`.\r\n\r\n## Resources\r\n\r\n- [MDN Web Docs for SVG Quadratic Curve](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths)\r\n- [Motion docs for SVG paths](https://www.framer.com/motion/component/#%23%23svg-line-drawing/)\r\n\r\n## Credits\r\n\r\nPorted to Framer by [Framer University](https://framer.university/)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>isVertical</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether the line is vertical or horizontal</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>grabThreshold</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`5`</TableCell>\r\n      <TableCell>The distance threshold for grabbing the line</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>releaseThreshold</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`100`</TableCell>\r\n      <TableCell>The distance threshold for releasing the line</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>strokeWidth</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`1`</TableCell>\r\n      <TableCell>The width of the line stroke</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`Transition`</TableCell>\r\n      <TableCell>`{ type: \"spring\", stiffness: 400, damping: 5, delay: 0 }`</TableCell>\r\n      <TableCell>The transition object of the line. Refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>animateInTransition</TableCell>\r\n      <TableCell>`Transition`</TableCell>\r\n      <TableCell>`{ type: \"spring\", stiffness: 400, damping: 5, delay: 0 }`</TableCell>\r\n      <TableCell>The transition object of the line when it is initially rendered. Refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling on the svg container</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/physics/gravity",
      "title": "Gravity",
      "description": "A set of wrapper components for creating physics-based gravity animations with Matter.js.",
      "content": "\r\n\r\n<ComponentPreview name=\"gravity-demo\" />\r\n\r\nSetting up Matter.js for creating physics-based animations can be a bit tricky and cumbersome, especially with React. This component simplifies the process by wrapping your content with a physics world, and transforming your React components into Matter.js bodies.\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs\r\n  command='shadcn@latest add \"https://fancycomponents.dev/r/gravity.json\"'\r\n  npx\r\n/>\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nFirst, install the following dependencies:\r\n\r\n<InstallTabs command=\"matter-js @types/matter-js poly-decomp svg-path-commander\" />\r\n\r\nWe use the `matter-js` library to create the physics simulation. The `poly-decomp` package is used to decompose bodies into a set of vertices, which is required for the `svg` body type. The `svg-path-commander` package is used to parse SVG paths and convert them into a set of vertices (since the built-in feature for this in `matter-js` is outdated).\r\n\r\nThen, create an utility function for parsing SVG paths into a set of vertices:\r\n\r\n<ComponentSource name=\"svg-path-to-vertices\" />\r\n\r\nAnd another one for calculating the position of an element based on its container, and a posiiton value:\r\n\r\n<ComponentSource name=\"calculate-position\" />\r\n\r\nThen, copy the component source code:\r\n\r\n<ComponentSource name=\"gravity\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nFirst, you need to wrap your scene / content with the `Gravity` component. Set the gravity direction vector in the `gravity` prop (default is `{x: 0, y: 1}`). Then, in order to transform your regular HTML elements into Matter bodies, you need to wrap them with the `MatterBody` component.\r\n\r\nYou need to set each bodies `x` and `y` position, either as a percentage of your container size, or as a number. You do not need to set the width and height manually, everything else is taken care of by component :). High-level example:\r\n\r\n<CodeSnippet title=\"Gravity usage example\">\r\n  ```tsx\r\n  <Gravity>\r\n    <MatterBody x=\"50%\" y=\"50%\">\r\n      <div>Hello world!</div>\r\n    </MatterBody>\r\n    <MatterBody x=\"10%\" y=\"10%\">\r\n      <div>sesame!</div>\r\n    </MatterBody>\r\n  </Gravity>\r\n  ```\r\n</CodeSnippet>\r\n\r\n## Understanding the component\r\n\r\n### Gravity component\r\n\r\nAt its core, the Gravity component creates and manages a Matter.js physics world. It handles:\r\n\r\n1. **Physics Setup**: Creates a canvas and initializes the Matter.js physics engine with:\r\n   - A physics engine to calculate forces and collisions\r\n   - A renderer to visualize the physics (when debug mode is enabled)\r\n   - A runner to step the physics simulation forward\r\n   - Mouse constraints to enable dragging of elements\r\n\r\n2. **Animation Loop**: Continuously updates the positions of your HTML elements to match their physics bodies in the Matter.js world. This creates the illusion that your DOM elements are actually affected by physics.\r\n\r\n3. **Controls**: Exposes three main methods:\r\n   - `start()`: Begins the physics simulation\r\n   - `stop()`: Pauses the physics simulation\r\n   - `reset()`: Returns all elements to their starting positions\r\n\r\n4. **Debug Mode**: When enabled via the `debug` prop, shows the actual Matter.js physics bodies as overlays, which is super helpful for development.\r\n\r\n### MatterBody component\r\n\r\nThe `MatterBody` component transforms regular HTML elements into physics-enabled elements. Key features:\r\n\r\n- **Positioning**: Set initial positions with `x` and `y` props\r\n\r\n<CodeSnippet title=\"Matter Body \">\r\n  ```\r\n  <MatterBody x=\"50%\" y=\"100px\">\r\n    <div>I'm physics-enabled!</div>\r\n  </MatterBody>\r\n  ```\r\n</CodeSnippet>\r\n\r\n- **Body Types**: Choose between different physics shapes:\r\n  - `rectangle`: Default, good for most elements\r\n  - `circle`: Perfect for round elements\r\n  - `svg`: For complex custom shapes\r\n\r\n- **Physics Properties**: Customize how elements behave with `matterBodyOptions`. The most commonly used options are:\r\n\r\n<CodeSnippet title=\"Matter Body options\">\r\n  ```tsx\r\n  <MatterBody\r\n    matterBodyOptions={{\r\n      friction: 0.5, // How slippery it is\r\n      restitution: 0.7, // How bouncy it is\r\n      density: 0.001, // How heavy it is\r\n      isStatic: false, // If true, the element won't move but can be collided with\r\n      force: { x: 0, y: 0 }, // Initial force applied to the body\r\n      // ...\r\n    }}\r\n  >\r\n    <div>I'm bouncy!</div>\r\n  </MatterBody>\r\n  ```\r\n</CodeSnippet>\r\n\r\nFor a complete list of options, check out the [Matter.js Body documentation](https://brm.io/matter-js/docs/classes/Body.html#properties). You can fine-tune everything from angular velocity to mass to create exactly the physics behavior you want.\r\n\r\n### Context\r\n\r\nThe components use React Context to communicate. When you wrap an element with `MatterBody`, it registers itself with the parent `Gravity` component. The registration process:\r\n\r\n1. Creates a Matter.js physics body matching your element's size and shape\r\n2. Adds the body to the physics world\r\n3. Sets up a sync system where the HTML element's position updates to match its physics body\r\n\r\n## Examples\r\n\r\n### Non-draggable bodies\r\n\r\nBy default, the MatterBody makes its element draggable. You can disable this behavior by setting the `isDraggable` prop to `false`. (Under the hood, we just add back the pointer-events to the elements, so they will be clickable, hover-able, etc, but the Matter body underneath will not receive any pointer events). This can be handy to create creative footers with clickable links for example:\r\n\r\n<ComponentPreview name=\"gravity-non-draggable-demo\" />\r\n\r\n### Different body types\r\n\r\nWith the `bodyType` prop, you can choose between different types of bodies. The available types are `circle`, `rectangle`, and `svg`.\r\n\r\nIn this example, we have a mixed of `circle` and `rectangle` bodies. Again, you do not need to define the sizes on the `MatterBody` component, you can define them on your component level, eg. adding `w-12 h12` to your tailwind classes. Then, the component will calculate the size for the matter.js engine.\r\n\r\n<ComponentPreview name=\"gravity-body-types-demo\" />\r\n\r\n### SVGs\r\n\r\nThe third `bodyType` option is `svg`, which allows you to create physics bodies from SVG elements. This is particularly useful for creating custom-shaped physics objects that match your SVG graphics.\r\n\r\nHere's how it works:\r\n\r\n1. The component takes your SVG element and extracts the path data\r\n2. It converts the path into a series of vertices (points) that outline the shape (with a custom converter using the `svg-path-commander` package)\r\n3. These vertices are then converted into polygons by matter.js (with the help of the `poly-decomp` package).\r\n4. The resulting polygons are then used to create Matter.js bodies\r\n\r\n<ComponentPreview name=\"gravity-svg-bodies-demo\" />\r\n\r\nAs you can see in the demo above, SVG bodies can produce varying results. Simple shapes like the stars translate well, maintaining their shapes in the physics simulation. More complex shapes like the _fancy_ text at the bottom (which is an SVG path, and not an HTML element) end up with rougher approximations.\r\n\r\nThis variance in quality stems from the challenging process of converting SVG paths to physics bodies. Therefore, there are a few caveats to keep in mind:\r\n\r\n1. **SVG Requirements**:\r\n   - Keep them simple. The simpler the SVG, the better the decomposition, and the simulation.\r\n   - It's only tested with single-path SVGs, and it probably won't work with nested paths.\r\n   - Avoid shapes with holes or complex curves, or shapes that are seem to be too complex to decompose into polygons.\r\n\r\n2. **Performance Impact**:\r\n   - Complex SVGs create more detailed physics bodies, which can slow down the simulation\r\n   - More vertices mean more calculations\r\n   - The initial path-to-vertices conversion can be slow.\r\n\r\nIf you're not getting the desired results, you have several options:\r\n\r\n1. Break down complex SVGs into simpler shapes\r\n2. Use basic physics bodies (rectangles/circles) with the SVG as a visual overlay\r\n3. Fine-tune the vertex sampling with the `sampleLength` prop\r\n\r\nWhile the demo's _fancy_ text on the bottom worked well by chance for me, you more than likely will need to experiment with different settings to get the desired results. Use the `debug` prop to visualize the physics bodies and their vertices, and adjust the `sampleLength` prop to control the accuracy of the conversion.\r\n\r\nFor more details on the decomposition process, refer to the [poly-decomp documentation](https://github.com/schteppe/poly-decomp), the [Matter.js documentation](https://brm.io/matter-js/docs/classes/Bodies.html#method_fromVertices), and to the [SVG path commander documentation](https://github.com/thednp/svg-path-commander).\r\n\r\n## Props\r\n\r\n### Gravity\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>debug</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to show the physics bodies and their vertices</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>gravity</TableCell>\r\n      <TableCell>`{ x: number; y: number }`</TableCell>\r\n      <TableCell>`{ x: 0, y: 1 }`</TableCell>\r\n      <TableCell>The direction of gravity</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>resetOnResize</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to reset the physics world when the window is resized</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>grabCursor</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to show grab/grabbing cursor when interacting with bodies</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>addTopWall</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to add a wall at the top of the canvas</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>autoStart</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to automatically start the physics simulation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes to apply to the container</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n### MatterBody\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>matterBodyOptions</TableCell>\r\n      <TableCell>`Matter.IBodyDefinition`</TableCell>\r\n      <TableCell>`{ friction: 0.1, restitution: 0.1, density: 0.001, isStatic: false }`</TableCell>\r\n      <TableCell>Matter.js body configuration options</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>bodyType</TableCell>\r\n      <TableCell>`\"rectangle\" | \"circle\" | \"svg\"`</TableCell>\r\n      <TableCell>`\"rectangle\"`</TableCell>\r\n      <TableCell>The type of physics body to create</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>isDraggable</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether the body can be dragged with the mouse</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>sampleLength</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`15`</TableCell>\r\n      <TableCell>The sampling distance for SVG path vertices</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>x</TableCell>\r\n      <TableCell>`number | string`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>Initial x position (can be percentage string)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>y</TableCell>\r\n      <TableCell>`number | string`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>Initial y position (can be percentage string)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>angle</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>Initial rotation angle in degrees</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes to apply to the container</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/basic-number-ticker",
      "title": "Basic Number Ticker",
      "description": "A component that animates a number from one value to another.",
      "content": "\r\n\r\n<ComponentPreview name=\"basic-number-ticker-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\" aria-label=\"CLI\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\" aria-label=\"Manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs\r\n  command='shadcn@latest add \"https://fancycomponents.dev/r/basic-number-ticker.json\"'\r\n  npx\r\n/>\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"basic-number-ticker\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Examples\r\n\r\n### Controlling the animation from outside the component\r\n\r\nTo start the animation from outside the component, you can use the `startAnimation` function that is exposed via the ref. In this example, the animation (re)start when the component enters the viewport.\r\n\r\n<ComponentPreview name=\"sesame-basic-number-ticker-demo\" />\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader >\r\n    <TableRow >\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>from<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>Starting value of the animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>target<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`100`</TableCell>\r\n      <TableCell>End value of the animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`ValueAnimationTransition`</TableCell>\r\n      <TableCell>`{ duration: 3, type: \"tween\", ease: \"easeInOut\" }`</TableCell>\r\n      <TableCell>Animation configuration, refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onStart</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>Callback function when animation starts</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onComplete</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>Callback function when animation completes</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>autoStart</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to start the animation automatically</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/breathing-text",
      "title": "Breathing Text",
      "description": "A text component that animates the font variation settings of letters in a breathing effect continuously. Works only with variable fonts.",
      "content": "\r\n\r\n<ComponentPreview name=\"breathing-text-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/breathing-text.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"breathing-text\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding Variable Fonts\r\n\r\nThis component is designed to work exclusively with variable fonts. Please refer to the <Link href=\"/docs/components/text/variable-font-hover-by-letter#understanding-variable-fonts\">Variable Font Hover By Letter</Link> documentation for more details.\r\n\r\n## Notes\r\n\r\nSince the animation is continous, keep the performance in check when using this component.\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`\"span\"`</TableCell>\r\n      <TableCell>HTML Tag to render the component as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>fromFontVariationSettings<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Initial font variation settings</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>toFontVariationSettings<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Target font variation settings to animate to</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`Transition`</TableCell>\r\n      <TableCell>`{ duration: 1.5, ease: \"easeInOut\" }`</TableCell>\r\n      <TableCell>Animation transition configuration</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerDuration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.1`</TableCell>\r\n      <TableCell>Duration of stagger delay between elements in seconds</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerFrom</TableCell>\r\n      <TableCell>`\"first\" | \"last\" | \"center\" | number`</TableCell>\r\n      <TableCell>`\"first\"`</TableCell>\r\n      <TableCell>Direction to stagger animations from</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>repeatDelay</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.1`</TableCell>\r\n      <TableCell>Delay between animation repeats in seconds</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Class name for styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/letter-3d-swap",
      "title": "Letter 3D Swap",
      "description": "A text component that swap the letters in a text with a box 3D effect.",
      "content": "\r\n\r\n<ComponentPreview name='letter-3d-swap-demo' />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/letter-3d-swap.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"letter-3d-swap\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nJust wrap your text with the component and set the `rotateDirection` prop to the direction you want the text to rotate, the rest will be taken care by the component.\r\n\r\n## Understanding the component\r\n\r\n### Splitting the text into characters\r\n\r\nFirst, we split the text into `WorldObject` objects, each containing an array of characters and a boolean indicating whether there should be a space after the character. We use a handy function for this, which should respect emojis too.\r\n<CodeSnippet title=\"Splitting the text into characters\">\r\n```tsx\r\n// handy function to split text into characters with support for unicode and emojis\r\nconst splitIntoCharacters = (text: string): string[] => {\r\n  if (typeof Intl !== \"undefined\" && \"Segmenter\" in Intl) {\r\n    const segmenter = new Intl.Segmenter(\"en\", { granularity: \"grapheme\" })\r\n    return Array.from(segmenter.segment(text), ({ segment }) => segment)\r\n  }\r\n  // Fallback for browsers that don't support Intl.Segmenter\r\n  return Array.from(text)\r\n}\r\n```\r\n</CodeSnippet>\r\n\r\nThis method also helps us to ensure that words stay together and properly spaced when the text wraps across multiple lines. Without this approach, simply splitting by characters would break words at line boundaries.\r\n\r\n<CodeSnippet title=\"Splitting the text into animation segments\">\r\n```tsx\r\n// Splitting the text into animation segments\r\nconst characters = useMemo(() => {\r\n    const t = text.split(\" \")\r\n    const result = t.map((word: string, i: number) => ({\r\n      characters: splitIntoCharacters(word),\r\n      needsSpace: i !== t.length - 1,\r\n    }))\r\n    return result\r\n}, [text])\r\n```\r\n</CodeSnippet>\r\n\r\n### 3D Transforms\r\n\r\nWhen rendering each character, we create two instances of it - a front face and a second face. The second face is positioned relative to the first one and uses 3D CSS transforms to create the illusion that it's on a different face of a 3D box. The face it appears on depends on the `rotateDirection` prop:\r\n\r\n- `\"top\"` - Character appears to flip upward from the top face\r\n- `\"right\"` - Character appears to flip from the right side \r\n- `\"bottom\"` - Character appears to flip downward from the bottom face\r\n- `\"left\"` - Character appears to flip from the left side\r\n\r\n\r\n#### Top and bottom rotations\r\n\r\nFor top and bottom rotations, we create a 3D box effect through a series of transforms:\r\n\r\n1. The front face is brought forward by translating it `0.5lh` on the Z axis (`lh` represents one line height)\r\n2. For the second face, we:\r\n   - Rotate it 90° (or -90°) on the X axis\r\n   - Then translate it `0.5lh` forward in its local coordinate system to align with the edge of our virtual box\r\n3. Finally, we translate the container back by `-0.5lh` to account for the initial translation of the front face\r\n\r\nThis creates the illusion of characters flipping between two faces of a 3D cube. The demo below shows how these transforms work together:\r\n\r\n<ExplanationDemo name='letter-3d-swap-explanation-top-demo' />\r\n\r\n#### Left and right rotations\r\n\r\nFor left/right rotations, we need to handle the box dimensions more carefully. Unlike top/bottom rotations where we can use line height (`lh`) as a fixed measurement, the width of each character varies. The side faces of our 3D box need to match the actual character width.\r\n\r\nTo achieve this, we use percentage-based translations on the X and Y axes, since these can automatically adapt to each character's width. The transform sequence works like this:\r\n\r\n1. First face:\r\n   - Rotate 90° on Y axis to face sideways\r\n   - Translate 50% of character width to align with edge\r\n   - Rotate -90° on Y axis to face forward again\r\n   \r\n2. Second face:\r\n   - Apply the same transforms as the first face\r\n   - Add additional transforms to position it correctly on the side\r\n\r\n3. Lastly, we push back both faces to account for the initial translation\r\n\r\nThe demo below shows this transform sequence step by step:\r\n\r\n<ExplanationDemo name='letter-3d-swap-explanation-left-demo' />\r\n\r\n#### Why the initial translation?\r\n\r\nThe initial forward translation of our box (using `0.5lh` for `top`/`bottom` rotations, or the transform chain for `left`/`right` rotations) serves an important purpose. It ensures the rotation axis passes through the center of our virtual 3D box, rather than along its front face. This creates a more natural flipping motion, as the character rotates around its center point rather than pivoting from its front edge. Without this translation, the box rotation would appear to swing outward in an unnatural arc rather than flipping in place.\r\n\r\nOf course, you can achieve the same result by applying (other) transforms in a different order, and even playing with the transform origins. I apologise if this seems overcomplicated, this is how it made sense to me :).\r\n\r\n### Animation\r\n\r\nNow that we have our virtual 3D box, the only thing left is to rotate each character box. For this, we use the `useAnimate` hook from [motion](https://motion.dev/docs/use-animate). This gives us a scope and an `animate` function to control the animation. We add `.letter-3d-swap-char-box-item` class name to each char box, so we can select and animate them with the `animate` function. After the animation is completed, we reset the transform to the original state.\r\n\r\n<CodeSnippet title=\"Animation\">\r\n```tsx\r\n// Animate each character with its specific delay\r\nawait animate(\r\n  \".letter-3d-swap-char-box-item\",\r\n  { transform: rotationTransform },\r\n  {\r\n    ...transition,\r\n    delay: (i: number) => delays[i],\r\n  }\r\n\r\n// Reset all boxes\r\nawait animate(\r\n  \".letter-3d-swap-char-box-item\",\r\n  { transform: \"rotateX(0deg) rotateY(0deg)\" },\r\n  { duration: 0 }\r\n)\r\n```\r\n</CodeSnippet>\r\n\r\nThe transform is just a 90/-90 degree rotation either on the X or Y axis, depending on the `rotateDirection` prop.\r\n\r\n### Stagger\r\n\r\nThe delay is calculated based on the `staggerFrom` prop, which can be set to `first`, `last`, `center`, `random` or a number. If it's a number, it's used as the index of the character to stagger from. For example, if `staggerFrom` is set to `2`, the second character will be staggered from the third one. We have a handy function to calculate the correct delay for each character:\r\n\r\n<CodeSnippet title=\"Stagger delay calculation\">\r\n```tsx\r\n// Helper function to calculate stagger delay for each text segment\r\nconst getStaggerDelay = useCallback(\r\n  (index: number, totalChars: number) => {\r\n    const total = totalChars\r\n    if (staggerFrom === \"first\") return index * staggerDuration\r\n    if (staggerFrom === \"last\") return (total - 1 - index) * staggerDuration\r\n    if (staggerFrom === \"center\") {\r\n      const center = Math.floor(total / 2)\r\n      return Math.abs(center - index) * staggerDuration\r\n    }\r\n    if (staggerFrom === \"random\") {\r\n      const randomIndex = Math.floor(Math.random() * total)\r\n      return Math.abs(randomIndex - index) * staggerDuration\r\n    }\r\n    return Math.abs(staggerFrom - index) * staggerDuration\r\n  },\r\n  [staggerFrom, staggerDuration]\r\n)\r\n```\r\n</CodeSnippet>\r\n\r\nCheck out the demo to see the possible values for `staggerFrom`.\r\n\r\n<ComponentPreview name='letter-3d-swap-stagger-demo' />\r\n\r\n## Resources\r\n\r\n- [Intro to CSS 3D transforms](https://3dtransforms.desandro.com/) by David DeSandro\r\n\r\n## Props\r\n\r\n### Letter3DSwapProps\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`p`</TableCell>\r\n      <TableCell>HTML Tag to render the component as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>mainClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Class name for the main container element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>frontFaceClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Class name for the front face element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>secondFaceClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Class name for the secondary face element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerDuration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.05`</TableCell>\r\n      <TableCell>Duration of stagger delay between elements in seconds</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerFrom</TableCell>\r\n      <TableCell>`\"first\" | \"last\" | \"center\" | \"random\" | number`</TableCell>\r\n      <TableCell>`\"first\"`</TableCell>\r\n      <TableCell>Direction to stagger animations from</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`ValueAnimationTransition | AnimationOptions`</TableCell>\r\n      <TableCell>`{ type: \"spring\", damping: 25, stiffness: 300 }`</TableCell>\r\n      <TableCell>Animation transition configuration</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>rotateDirection</TableCell>\r\n      <TableCell>`\"top\" | \"right\" | \"bottom\" | \"left\"`</TableCell>\r\n      <TableCell>`\"right\"`</TableCell>\r\n      <TableCell>Direction of rotation</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/letter-swap",
      "title": "Letter Swap",
      "description": "A text component that swaps the letters vertically on hover.",
      "content": "\r\n\r\n<ComponentPreview name=\"letter-swap-demo\" />\r\n\r\nThere are two types of animations available for this component:\r\n\r\n1. Forward animation — plays the animation timeline once forward, when you hover over the text.\r\n2. Ping Pong animation — plays the animation timeline in a ping pong fashion. It plays once forward when you hover over the text, and once in the opposite direction when you hover away from the text.\r\n\r\n## Installation\r\n\r\n### Only forward animation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/letter-swap-forward-anim.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"letter-swap-forward-anim\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n### Ping Pong animation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/letter-swap-pingpong-anim.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nInstall the following dependencies:\r\n\r\n<InstallTabs command=\"lodash\" />\r\n\r\nLodash is used for debouncing here — so the animation doesn't break on rapid hover changes.\r\n\r\nThen, copy the source code:\r\n\r\n<ComponentSource name=\"letter-swap-pingpong-anim\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\n1. First, we duplicate the text we want to animate. We'll have two identical copies of the text.\r\n\r\n2. We create a container `<span>` element with these key properties:\r\n\r\n   - `position: relative` - This establishes a positioning context\r\n   - `overflow: hidden` - This ensures text outside the container boundaries is hidden\r\n\r\n3. For each copy of the text:\r\n\r\n   - We split it into individual letters\r\n   - Each letter is wrapped in its own `<span>` element, with `absolute` positioning\r\n   - The letters from both copies are stacked vertically on top of each other (`top: 0`, and `top: 100%`)\r\n\r\n4. When hovering:\r\n   - The original letters slide upward out of view (hidden by overflow), by setting `top: 100%`\r\n   - The duplicate letters slide up into the original position, by setting `top: 0`\r\n   - This creates a smooth swapping effect\r\n\r\nIf `reverse` is enabled, the animation direction is flipped.\r\n\r\n### Stagger\r\n\r\nWith the `staggerFrom` prop, you can control the index of the letter where the stagger animation starts.\r\n\r\n<ComponentPreview name=\"letter-swap-demo-stagger\" />\r\n\r\n### Line swap\r\n\r\nBy setting the `staggerDelay` prop to zero, you can create a line swap effect.\r\n\r\n<ComponentPreview name=\"letter-swap-demo-line\" />\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>label<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>reverse</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Direction of the animation (true: bottom to top, false: top to bottom)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`AnimationOptions`</TableCell>\r\n      <TableCell>`{ type: \"spring\", duration: 0.7 }`</TableCell>\r\n      <TableCell>Animation configuration for each letter. Refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerDuration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.03`</TableCell>\r\n      <TableCell>Delay between each letter's animation start</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerFrom</TableCell>\r\n      <TableCell>`\"first\" | \"last\" | \"center\" | number`</TableCell>\r\n      <TableCell>`\"first\"`</TableCell>\r\n      <TableCell>Starting point of the stagger effect</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onClick</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for click events</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/random-letter-swap",
      "title": "Random Letter Swap",
      "description": "A text component that randomly swaps the letters vertically on hover.",
      "content": "\r\n\r\n<ComponentPreview name=\"random-letter-swap-demo\" />\r\n\r\nThere are two types of animations available for this component:\r\n\r\n1. Forward animation — plays the animation timeline once forward.\r\n2. Ping Pong animation — plays the animation timeline in a ping pong fashion.\r\n\r\n## Installation\r\n\r\n### Only forward animation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/random-letter-swap-forward-anim.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nInstall the following dependencies:\r\n\r\n<InstallTabs command=\"lodash\" />\r\n\r\nLodash is used for debouncing here — so the animation doesn't break on rapid hover changes.\r\n\r\nThen, copy and paste the following code into your project:\r\n\r\n<ComponentSource name=\"random-letter-swap-forward-anim\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n### Ping Pong animation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/random-letter-swap-pingpong-anim.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nInstall the following dependencies:\r\n\r\n<InstallTabs command=\"lodash\" />\r\n\r\nLodash is used for debouncing here — so the animation doesn't break on rapid hover changes.\r\n\r\nThen, copy and paste the following code into your project:\r\n\r\n<ComponentSource name=\"random-letter-swap-pingpong-anim\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\nThe component works the same as the <Link href=\"/docs/components/text/letter-swap\">Letter Swap Hover</Link> component, but with a random letter swapping animation (and of course, a slightly different implementation of the animation). Please refer to that documentation for more details.\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>label<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>reverse</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Direction of the animation (true: bottom to top, false: top to bottom)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`AnimationOptions`</TableCell>\r\n      <TableCell>`{ type: \"spring\", duration: 0.7 }`</TableCell>\r\n      <TableCell>Animation configuration for each letter</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerDuration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.03`</TableCell>\r\n      <TableCell>Delay between each letter's animation start</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onClick</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for click events</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/scramble-hover",
      "title": "Scramble Hover",
      "description": "A text component that scrambles the text on hover.",
      "content": "\r\n\r\n<ComponentPreview name=\"scramble-hover-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/scramble-hover.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"scramble-hover\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nFor the scrambling effect, you can use either the original characters, or another set of characters specified in the `characters` prop.\r\n\r\n<ComponentPreview name=\"scramble-hover-new-chars-demo\" />\r\n\r\nYou can also apply a different styling on the scrambled text by passing a string to the `scrambleClassName` prop. This allows for example to use a different font family or color, like in the following example. Please not that if the `scrambledClassName` is applied, it's not going to be merged with the `className` prop, so you have to style the original text and the scrambled text separately.\r\n\r\n<ComponentPreview name=\"scramble-hover-diff-class-demo\" />\r\n\r\nWith the `sequential` prop, you can scramble the text in a sequential manner, starting from the `start`, the `end`, or the `center` of the text. In that case, the `maxIterations` prop is ignored.\r\nIn my experience this works best with a monospaced font, but feel free to experiment.\r\n\r\n<ComponentPreview name=\"scramble-hover-sequential-demo\" />\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        text<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be displayed and scrambled</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrambleSpeed</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`50`</TableCell>\r\n      <TableCell>Speed of the scrambling animation in milliseconds</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>maxIterations</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`10`</TableCell>\r\n      <TableCell>\r\n        Maximum number of iterations for the scrambling animation\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>sequential</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to scramble the text sequentially</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>revealDirection</TableCell>\r\n      <TableCell>`\"start\" | \"end\" | \"center\"`</TableCell>\r\n      <TableCell>`\"start\"`</TableCell>\r\n      <TableCell>The direction to reveal the scrambled text</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>useOriginalCharsOnly</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>\r\n        Whether to use only the original characters or the whole string\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>characters</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>\r\n        `\"ABCDEFGHIJKLMNO PQRSTUVWXYZ abcdefghijklmno pqrstuvwxyz !@#$%^&*()_+\"`\r\n      </TableCell>\r\n      <TableCell>\r\n        Characters to use for scrambling, if `useOriginalCharsOnly` is `false`\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrambledClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>\r\n        Additional CSS classes for styling the scrambled text\r\n      </TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/scramble-in",
      "title": "Scramble In",
      "description": "A text component that reveals the text with a scrambled part in front.",
      "content": "\r\n\r\n<ComponentPreview\r\n  name=\"scramble-in-demo\"\r\n  framerLink=\"https://framer.university/resources/text-scramble-appear-effect-in-framer\"\r\n/>\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/scramble-in.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"scramble-in\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nWith the `autoStart` prop, you can start the animation automatically.\r\nBut there is also a `start` and `reset` method exposed via a ref if you need to control the animation from outside of the component, as you see in the demo above.\r\n\r\n## Credits\r\n\r\nPorted to Framer by [Framer University](https://framer.university/)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        text<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be displayed and scrambled</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrambleSpeed</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`50`</TableCell>\r\n      <TableCell>Speed of the scrambling animation in milliseconds</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrambledLetterCount</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`8`</TableCell>\r\n      <TableCell>Number of letters to scramble</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>autoStart</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to start the animation automatically</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>characters</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>\r\n        `\"ABCDEFGHIJKLMNO PQRSTUVWXYZ abcdefghijklmno pqrstuvwxyz !@#$%^&*()_+\"`\r\n      </TableCell>\r\n      <TableCell>Characters to use for scrambling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrambledClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>\r\n        Additional CSS classes for styling the scrambled text\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>autoStart</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to start the animation automatically</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onComplete</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for when the animation completes</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onStart</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for when the animation starts</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/scroll-and-swap",
      "title": "Scroll and Swap Text",
      "description": "A text component that swaps the letters vertically on scroll.",
      "content": "\r\n\r\n<ComponentPreview name=\"scroll-and-swap-text-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/scroll-and-swap-text.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"scroll-and-swap-text\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\nThe trick here is similar to the [Letter Swap Hover](/docs/components/text/letter-swap-hover) component—duplicate the text, then wrapping the them in a container with `relative` position, then stack the elements vertically. We use `useScroll` hook from motion to track the scroll position of the container, and use the `scrollYProgress` value to offset the vertical position of the elements (by setting the `y` property of the element).\r\n\r\n## Notes\r\n\r\n- In order to achieve a nice effect, you likely have to play with the container (where to track the scroll) and its offset. Please refer to motion's [documentation](https://www.framer.com/motion/use-scroll/) for more details.\r\n\r\n- Make sure that the container has a non-static position, like `relative`, `fixed`, or `absolute` to ensure scroll offset is calculated correctly.\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`\"span\"`</TableCell>\r\n      <TableCell>HTML Tag to render the component as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>containerRef<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.RefObject<HTMLElement>`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Reference to the container element for scroll tracking</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>offset</TableCell>\r\n      <TableCell>`[string, string]`</TableCell>\r\n      <TableCell>`[\"0 0\", \"0 1\"]`</TableCell>\r\n      <TableCell>Offset configuration for when the animation should start and end relative to the scroll container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling the component</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>springConfig</TableCell>\r\n      <TableCell>`{ stiffness?: number, damping?: number, mass?: number }`</TableCell>\r\n      <TableCell>`{ stiffness: 200, damping: 30 }`</TableCell>\r\n      <TableCell>Spring animation configuration for smoothing the scroll-based animation</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/text-along-path",
      "title": "Text Along Path",
      "description": "A text component that animates along an SVG path.",
      "content": "\r\n\r\n<ComponentPreview name=\"text-along-path-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/text-along-path.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"text-along-path\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nThere are two types of animations available for this component, which you can control with the `animationType` prop:\r\n\r\n1. `auto` — plays the animation automatically when the text is initially rendered. This is the default setting.\r\n2. `scroll` — drives the animation with the scroll position of the container.\r\n   To use this component, you'll need to provide an SVG path via the `path` prop. You can create this path using:\r\n\r\n- Design tools like Figma, Illustrator, or any online SVG editor\r\n- Code, by constructing the path programmatically\r\n\r\nThe component only requires the `d` attribute from your SVG path and the `viewBox` attribute from the SVG container.\r\n\r\n### Path ID\r\n\r\nEach path needs a unique `id` to properly reference it in the text elements. While the component includes a basic ID generator, it's recommended to provide your own via the `pathId` prop, especially when using multiple instances of the component. This ensures animations remain distinct and don't interfere with each other.\r\n\r\n### Sizing and ViewBox\r\n\r\nThe SVG container can be sized flexibly - by default it will expand to fill its parent container. The `viewBox` attribute can be any dimensions, but it's recommended to:\r\n\r\n1. Match the aspect ratio you want the final component to have\r\n2. Use dimensions that make sense for your path coordinates\r\n\r\nFor example, if your path coordinates span 0-500 on x and 0-100 on y, a viewBox of \"0 0 500 100\" would be appropriate.\r\n\r\n## Understanding the component\r\n\r\nThe component consist an svg container with a path element, and two text elements with `textPath` elements inside. The `textPath` elements are used to animate the text along the path. When it is used with the `auto` animation type, we use an `animate` element to animate the text along the path. When it is used with the `scroll` animation type, we animate the `startOffset` attribute of the `textPath` elements to scroll the text along the path.\r\n\r\n## Auto animation\r\n\r\nThe `auto` animation type is the default setting, and it plays the animation automatically when the text is initially rendered. We start at 0% offset and animate to 100% offset, which means the text will start at the beginning of the path and end at the end of the path.\r\n\r\nThe relevant props for the `auto` animation type are:\r\n\r\n- `duration` — the duration of the animation in milliseconds\r\n- `repeatCount` — the number of times the animation should repeat. You can also set this to `indefinite` to make the animation repeat indefinitely (default setting)\r\n\r\n<ComponentPreview name=\"text-along-path-auto-demo\" />\r\n\r\n## Animation on closed paths\r\n\r\nYou might notice the component uses two identical text elements with `textPath` elements when you use the `auto` animation type. The reason for this to achieve the illusion of continuous movement on a closed path. Here is how it works:\r\n\r\n1. The first text element starts at the beginning of the path and animates forward\r\n2. The second text element follows behind the first one at an offset\r\n3. When the first text reaches the end of the path, the second text has moved into position to continue the animation\r\n4. This creates the illusion of continuous movement without any visible jumps or gaps\r\n\r\nThis dual-text approach is necessary because animating a single text element would result in a noticeable \"jump\" when the animation resets back to the start position.\r\n\r\nSee an example of this in the first, and the following demo above:\r\n\r\n<ComponentPreview name=\"text-along-path-circle-demo\" />\r\n\r\nThis example above also demonstrates how to use the `easingFunction` prop to create more interesting animations. Please refer to the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function) on what values you can use.\r\n\r\nAnother important note here is that you have to experiment with the text length and size, to ensure the text doesn't overlap with each other, since it's not calculated automatically.\r\n\r\n## Preserve aspect ratio\r\n\r\nThe `preserveAspectRatio` attribute controls how the SVG content scales to fit its container when their aspect ratios differ. This is determined by comparing the `viewBox` dimensions to the actual SVG container size. For example, with `preserveAspectRatio=\"xMidYMid meet\"`, the path and text will be centered both horizontally and vertically while maintaining proportions.\r\n\r\nPlease refer to the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio) for the poossible values. In short, the default value `xMidYMid meet` will work for most cases. If you set it to `none`, the SVG container will be stretched to the container size, but will also result in a distortion of the text. Check out this behaviour on the first demo. Resize your viewport to see the difference.\r\n\r\n## Scroll\r\n\r\nBy setting the `animationType` prop to `scroll`, you can control the animation with the scroll position of the container. For tracking the scroll position, we use the `useScroll` hook from `motion/react`.\r\n\r\nThe relevant props are:\r\n\r\n- `scrollContainer` — a ref to the container element that the scroll animation will be driven by\r\n- `scrollOffset` — the scroll offset range for the animation\r\n- `scrollTransformValues` — The `scrollYProgress` value returned by `useScroll` hook ranges between 0 and 1, and this prop defines how we should map these values to the `startOffset` attribute of the text elements. It will be converted to percentage values.\r\n\r\nPlease refer to the [motion docs](https://motion.dev/docs/react-scroll-animations) for more details.\r\n\r\n<ComponentPreview name=\"text-along-path-scroll-demo\" />\r\n\r\n## Notes\r\n\r\nThe performance impact of the animation increases with the length and complexity of the path, especially if you're using multiple instances, so keep an eye on it :).\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>path<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The path to be animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>text<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>pathId</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The ID for the path</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>pathClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for the path</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>preserveAspectRatio</TableCell>\r\n      <TableCell>`PerserveAspectRatio`</TableCell>\r\n      <TableCell>`\"xMidYMid meet\"`</TableCell>\r\n      <TableCell>The aspect ratio to preserve when scaling the SVG</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>showPath</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to show the path</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>width</TableCell>\r\n      <TableCell>`string | number`</TableCell>\r\n      <TableCell>`100%`</TableCell>\r\n      <TableCell>The width of the SVG container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>height</TableCell>\r\n      <TableCell>`string | number`</TableCell>\r\n      <TableCell>`100%`</TableCell>\r\n      <TableCell>The height of the SVG container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>viewBox</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`\"0 0 100 100\"`</TableCell>\r\n      <TableCell>The viewBox of the SVG container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>svgClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for the SVG container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>textClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for the text</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>textAnchor</TableCell>\r\n      <TableCell>`\"start\" | \"middle\" | \"end\"`</TableCell>\r\n      <TableCell>`\"start\"`</TableCell>\r\n      <TableCell>The text anchor of the text</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>animationType</TableCell>\r\n      <TableCell>`\"auto\" | \"scroll\"`</TableCell>\r\n      <TableCell>`\"auto\"`</TableCell>\r\n      <TableCell>The animation type</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>duration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`4`</TableCell>\r\n      <TableCell>The duration of the animation in milliseconds</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>repeatCount</TableCell>\r\n      <TableCell>`number | \"indefinite\"`</TableCell>\r\n      <TableCell>`\"indefinite\"`</TableCell>\r\n      <TableCell>The number of times the animation should repeat</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>easingFunction</TableCell>\r\n      <TableCell>`{ calcMode?: string; keyTimes?: string; keySplines?: string }`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The easing function for the animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollContainer</TableCell>\r\n      <TableCell>`RefObject<HTMLElement>`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The ref to the container element that the scroll animation will be driven by</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollOffset</TableCell>\r\n      <TableCell>`UseScrollOptions[\"offset\"]`</TableCell>\r\n      <TableCell>`[\"start end\", \"end end\"]`</TableCell>\r\n      <TableCell>The scroll offset range for the animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>scrollTransformValues</TableCell>\r\n      <TableCell>`[number, number]`</TableCell>\r\n      <TableCell>`[0, 100]`</TableCell>\r\n      <TableCell>The scrollYProgress value returned by `useScroll` hook ranges between 0 and 1, and this prop defines how we should map these values to the `startOffset` attribute of the text elements. It will be converted to percentage values.</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/text-cursor-proximity",
      "title": "Text Cursor Proximity",
      "description": "A text component that animates the letters based on the cursor proximity",
      "content": "\r\n\r\n<ComponentPreview name=\"text-cursor-proximity-demo\" framerLink=\"https://framer.university/resources/text-magnifier-component-for-framer\"/>\r\n\r\n## Installation \r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/text-cursor-proximity.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n\r\nCreate a hook for querying the cursor/mouse position.\r\n\r\n<ComponentSource name=\"use-mouse-position-ref\" />\r\n\r\nThis hook actually returns a ref to the position (instead of a state), so we can avoid re-renders when the cursor moves.\r\n\r\nThen, copy and paste the following code into your project:\r\n\r\n<ComponentSource name=\"text-cursor-proximity\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\nThe `TextCursorProximity` splits its text into letters that respond to cursor movement by adjusting their CSS properties based on the distance between the letter and cursor position.\r\n\r\n1. Splitting text into individual letters\r\n2. Tracking cursor position relative to each letter\r\n3. Smoothly transitioning CSS values with motion's `useTransform` hook\r\n4. Supporting multiple falloff patterns for the effect\r\n\r\n### How it works\r\n\r\nThe component calculates the distance between the cursor and each letter in real-time. When the cursor comes within the specified `radius` of a letter, that letter's CSS properties (like scale, color, etc.) smoothly interpolate between two states. For this, we use the `motion` library's `useTransform` hook, which maps the CSS properties from the `styles.*.from` state to the `styles.*.to` state based on the proximity value (which ranges from 0 to 1).\r\n\r\n- Default state: (defined in `styles.*.from`)\r\n- Target state (defined in `styles.*.to`)\r\n\r\nYou can interpolate any value that [motion supports](https://motion.dev/docs/react-animation#animatable-values) (which is actually any CSS value, even those that can't be animated by the browser, like `mask-image`).\r\n\r\nThe closer the cursor gets to a letter, the closer that letter moves toward its target state.\r\n\r\n## Examples\r\n\r\n### Falloff\r\n\r\nWith the `falloff` prop, you can control the type of falloff. It can be either `linear`, `exponential`, or `gaussian`. The following demo showcases the `exponential` one. The effects are best observed on a larger block of text.\r\n\r\n<ComponentPreview name=\"text-cursor-proximity-falloff-demo\" />\r\n\r\n## Notes\r\n\r\nIt seems like interpolating on large number of letters simultaneously can be a bit slow, even when we're avoiding re-renders with state updates. If you're experiencing performance issues, try to limit the length of the text you're animating.\r\n\r\n## Credits\r\n\r\nPorted to Framer by [Framer University](https://framer.university/)\r\n\r\n## Props\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`\"span\"`</TableCell>\r\n      <TableCell>The HTML element to render the component as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>styles<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`Partial<{ [K in keyof CSSProperties]: { from: string | number, to: string | number } }>`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>CSS properties to animate and their from/to values</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>containerRef<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.RefObject<HTMLDivElement>`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Reference to the container for mouse tracking</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>radius</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`50`</TableCell>\r\n      <TableCell>The radius of the proximity effect in pixels</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>falloff</TableCell>\r\n      <TableCell>`\"linear\" | \"exponential\" | \"gaussian\"`</TableCell>\r\n      <TableCell>`\"linear\"`</TableCell>\r\n      <TableCell>The falloff pattern for the proximity effect</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/text-highlighter",
      "title": "Text Highlighter",
      "description": "An animated text highlighting component with multiple trigger modes and directional animations.",
      "content": "\r\n\r\n<ComponentPreview name=\"text-highlighter-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs\r\n  command='shadcn@latest add \"https://fancycomponents.dev/r/text-highlighter.json\"'\r\n  npx\r\n/>\r\n\r\n</TabsContent>  \r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"text-highlighter\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nJust wrap your text content with the component and set the highlight color with the `highlightColor` prop.\r\n\r\n<CodeSnippet title=\"Usage example\">\r\n  ```tsx\r\n  <TextHighlighter highlightColor=\"hsl(25, 90%, 80%)\">Howdy!</TextHighlighter>\r\n  ```\r\n</CodeSnippet>\r\n\r\n## Understanding the component\r\n\r\nThe magic behind this component lies in animating the text's background. Instead of using a solid background color (CSS prop: `background-color`), we use `background-image` with a linear gradient. This allows us to animate the entire background of the text by changing the `background-size` property; something that wouldn't be possible with the simple `background-color` property. We also use a linear gradient because we can't set a solid color directly as a background image (as far as I know).\r\n\r\n<CodeSnippet title=\"Highlighter style\">\r\n```tsx\r\nconst highlightStyle = {\r\n  backgroundImage: `linear-gradient(${highlightColor}, ${highlightColor})`,\r\n  backgroundRepeat: \"no-repeat\",\r\n  backgroundPosition: backgroundPosition,\r\n  backgroundSize: animatedSize,\r\n  boxDecorationBreak: \"clone\",\r\n  WebkitBoxDecorationBreak: \"clone\",\r\n} as React.CSSProperties\r\n```\r\n</CodeSnippet>\r\n\r\nWe also use `box-decoration-break: clone` to make sure each individual line is properly highlighted when dealing with multi-line text. Check out [this demo](https://developer.mozilla.org/en-US/docs/Web/CSS/box-decoration-break) why this is important.\r\n\r\nThe direction of the highlight reveal is controlled by the `direction` prop. Depending on the value, we set the `background-position` and `background-size` accordingly. There is two function which returns the appropriate values:\r\n\r\n<CodeSnippet title=\"Get animation values by direction\">\r\n```tsx\r\n// Get background size based on direction\r\nconst getBackgroundSize = (animated: boolean) => {\r\n  switch (currentDirection) {\r\n    case \"ltr\":\r\n      return animated ? \"100% 100%\" : \"0% 100%\"\r\n    case \"rtl\":\r\n      return animated ? \"100% 100%\" : \"0% 100%\"\r\n    case \"ttb\":\r\n      return animated ? \"100% 100%\" : \"100% 0%\"\r\n    case \"btt\":\r\n      return animated ? \"100% 100%\" : \"100% 0%\"\r\n    default:\r\n      return animated ? \"100% 100%\" : \"0% 100%\"\r\n  }\r\n}\r\n\r\n// Get background position based on direction\r\nconst getBackgroundPosition = () => {\r\nswitch (currentDirection) {\r\ncase \"ltr\":\r\nreturn \"0% 0%\"\r\ncase \"rtl\":\r\nreturn \"100% 0%\"\r\ncase \"ttb\":\r\nreturn \"0% 0%\"\r\ncase \"btt\":\r\nreturn \"0% 100%\"\r\ndefault:\r\nreturn \"0% 0%\"\r\n}\r\n}\r\n\r\n````\r\n</CodeSnippet>\r\n\r\nThen, we just use motion to animate the `background-size` property based on the `shouldAnimate` state:\r\n\r\n<CodeSnippet title=\"Animation\">\r\n```tsx\r\n<motion.span\r\n  className={cn(\"inline\", className)}\r\n  style={highlightStyle}\r\n  animate={{\r\n    backgroundSize: animatedSize,\r\n  }}\r\n  initial={{\r\n    backgroundSize: initialSize,\r\n  }}\r\n  transition={transition}\r\n>\r\n  {children}\r\n</motion.span>\r\n````\r\n\r\n</CodeSnippet>\r\n\r\nYou can customize the transition by passing a `Transition` object to the `transition` prop. The default value is spring type animation `{ type: \"spring\", duration: 1, delay: 0., bounce: 0 }`.\r\n\r\nBy default, the animation will be triggered once the component is mounted. Another interesting trigger option is `inView`, which will trigger the animation when the component enters the viewport (demonstrated in the demo above). You can customize that behaviour by setting the `useInViewOptions` prop. For more information, check out the [useInView](https://www.react-spring.io/docs/hooks/use-in-view) documentation.\r\n\r\n### Different directions\r\n\r\nYou can control the highlight animation direction via the `direction` prop. The available options are:\r\n\r\n- `\"ltr\"` - Left to right animation\r\n- `\"rtl\"` - Right to left animation\r\n- `\"ttb\"` - Top to bottom animation\r\n- `\"btt\"` - Bottom to top animation\r\n\r\nThe following demo shows how to dynamically change the reveal direction based on the user's scroll direction. Scroll left and right to see the animations trigger.\r\n\r\n<ComponentPreview name=\"text-highlighter-scroll-demo\" />\r\n\r\n### Hover\r\n\r\nYou can also trigger the highlight animation via hover, if you set the `triggerType` prop to `\"hover\"`:\r\n\r\n<ComponentPreview name=\"text-highlighter-hover-demo\" />\r\n\r\n### Control via ref\r\n\r\nYou can also trigger the animation via an exposed ref. This is useful if you want to trigger the animation programmatically:\r\n\r\n<ComponentPreview name=\"text-highlighter-ref-demo\" />\r\n\r\n## Notes\r\n\r\n- While the component only support a single-colored highlight directly, you can change it to an image, a sesame gradient, or anything that a `background-image` can handle. Just change the appropriate line:\r\n  <CodeSnippet title=\"Fancier highlight color\">\r\n\r\n```ts\r\nbackgroundImage: `linear-gradient(${highlightColor}, ${highlightColor})`,   // change this to make it fancier\r\n```\r\n\r\n</CodeSnippet>\r\n\r\n- As many users have pointed out, excessive animations can be distracting and impact readability, especially when highlighting large blocks of text. Consider using animations sparingly and adjusting the transition duration and delay to create a more subtle effect. You may also want to use the `useInViewOptions` prop to control when animations trigger, for example by increasing the `amount` threshold or setting `once: true` to only animate elements once.\r\n\r\n## Props\r\n\r\n### TextHighlighterProps\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text content to be highlighted</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`\"span\"`</TableCell>\r\n      <TableCell>HTML element to render as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>triggerType</TableCell>\r\n      <TableCell>`\"auto\" | \"hover\" | \"ref\" | \"inView\"`</TableCell>\r\n      <TableCell>`\"inView\"`</TableCell>\r\n      <TableCell>How to trigger the animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`Transition`</TableCell>\r\n      <TableCell>`{ type: \"spring\", duration: 1, delay: 0, bounce: 0 }`</TableCell>\r\n      <TableCell>Animation transition configuration</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>useInViewOptions</TableCell>\r\n      <TableCell>`UseInViewOptions`</TableCell>\r\n      <TableCell>`{ once: true, initial: false, amount: 0.5 }`</TableCell>\r\n      <TableCell>Options for useInView hook when triggerType is \"inView\"</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Class name for the container element</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>highlightColor</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`\"hsl(25, 90%, 80%)\"`</TableCell>\r\n      <TableCell>Highlight color (CSS color string)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>direction</TableCell>\r\n      <TableCell>`\"ltr\" | \"rtl\" | \"ttb\" | \"btt\"`</TableCell>\r\n      <TableCell>`\"ltr\"`</TableCell>\r\n      <TableCell>Direction of the highlight animation</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n### TextHighlighterRef\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Method</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>animate(direction?: HighlightDirection)</TableCell>\r\n      <TableCell>\r\n        Trigger the highlight animation with optional direction override\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>reset()</TableCell>\r\n      <TableCell>Reset the highlight animation to its initial state</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/text-rotate",
      "title": "Text Rotate",
      "description": "A text component that switches the rendered text from a list.",
      "content": "\r\n\r\n<ComponentPreview name=\"text-rotate-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/text-rotate.json&quot;\" npx />\r\n\r\n</TabsContent>  \r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"text-rotate\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\n1. For the animation, we switch the actual rendered text from the `texts` array. Either automatically, if the `auto` prop is set to `true`, or we can do it manually, by calling the `next()` or `previous()` methods exposed via a ref.\r\n\r\n2. For animating out the previous text, and animating in the next, we use the `AnimatePresence` component from `motion/react`. The `initial`, `animate` and `exit` props can be used to define the three states of the text. Refer to the [motion documentation](https://motion.dev/docs/react/docs/react-animate-presence) for more details.\r\n\r\n3. The current text is split into smaller pieces based on the `splitBy` prop, which will determine how the text will be animated:\r\n\r\n   - `words`: Splits into individual words (e.g., \"Hello world\" → [\"Hello\", \"world\"])\r\n   - `characters`: Splits into individual characters (e.g., \"Hi\" → [\"H\", \"i\"])\r\n   - `lines`: Splits by newline characters (`\\n`)\r\n   - `string`: Splits by any custom string delimiter\r\n\r\n4. Each piece of text is wrapped in two `<span>` elements: An outer `<span>` that acts as a container for a word or line of text and an inner `<span>` that holds the actual text. There are two reasons for this:\r\n\r\n    1. When dealing with multi-line text, each line maintains its own reveal animation starting point. This means if you have text that spans multiple lines, each line will animate independently from its own baseline, rather than all elements animating from a single point (like the bottom of the entire paragraph).\r\n    2. When using `characters` mode, characters from the same word stay together in a word container. This prevents unwanted line breaks in the middle of words - if a word needs to wrap to the next line, it will wrap as a complete unit rather than having some characters on one line and others on the next line. This maintains proper text flow and readability while still allowing character-by-character animation within each word.\r\n\r\n\r\n## Examples\r\n\r\n### Custom animation variations\r\n\r\nYou can customize the `animate`, `exit`, and `initial` props to create custom animation variations. For example, you can use the `filter` property to blur the text during the animation.\r\n\r\n<ComponentPreview name=\"text-rotate-custom-animation-demo\" />\r\n\r\n### SplitBy variations\r\n\r\nWith the `splitBy` prop, you can control how the text is split into smaller pieces. It can be either `words`, `characters`, `lines`, or a custom `string` delimiter. In case of `lines`, you are responsible for adding the `\\n` delimiter yourself.\r\n\r\nThe following example demonstrates the `words` (the quote) and `characters` (the author) mode. It should respect multiline texts.\r\n\r\n<ComponentPreview name=\"text-rotate-multiline-demo\" />\r\n\r\n### Stagger\r\n\r\nWith the `staggerFrom` prop, you can control the index of the letter/word/line where the stagger animation starts. Possible values are `\"first\"`, `\"center\"`, `\"last\"`, `\"random\"`, or a number.\r\n\r\n<ComponentPreview name=\"text-rotate-stagger-demo\" />\r\n\r\n### Manual control\r\n\r\nIf the `auto` prop is set to `false`, you can manually control the animation by calling the `next()` or `previous()` methods exposed via a ref.\r\n\r\n<ComponentPreview name=\"text-rotate-step-demo\" />\r\n\r\nThis can be handy for a lot of use cases, eg. a scroll-triggered animation.\r\n\r\n<ComponentPreview name=\"text-rotate-scroll-step-demo\" />\r\n\r\n### Different animation per segment\r\n\r\nFor the `animate`, `exit`, and `initial` props, you can either pass one single object, or an array of objects. This allows you to map different animations to each segment of the text. If there are more segments than animations, we will cycle through the animations.\r\n\r\n<ComponentPreview name=\"text-rotate-mapping-demo\" />\r\n\r\n## Notes\r\n\r\nIf you're using `auto` mode, make sure that the `rotationInterval` prop is set to a value that's greater than the duration of initial/exit animations, otherwise we will switch to a new text before the animation is complete. \r\n\r\n## Props\r\n\r\n### TextRotateProps\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>texts<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string[]`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`p`</TableCell>\r\n      <TableCell>Render as HTML Tag</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>initial</TableCell>\r\n      <TableCell>`MotionProps[\"initial\"] | MotionProps[\"initial\"][]`</TableCell>\r\n      <TableCell>`{ y: \"100%\", opacity: 0 }`</TableCell>\r\n      <TableCell>Initial animation state or array of states. If array is provided, states will be mapped to text segments cyclically.</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>animate</TableCell>\r\n      <TableCell>`MotionProps[\"animate\"] | MotionProps[\"animate\"][]`</TableCell>\r\n      <TableCell>`{ y: 0, opacity: 1 }`</TableCell>\r\n      <TableCell>Animation state to animate to or array of states. If array is provided, states will be mapped to text segments cyclically.</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>exit</TableCell>\r\n      <TableCell>`MotionProps[\"exit\"] | MotionProps[\"exit\"][]`</TableCell>\r\n      <TableCell>`{ y: \"-120%\", opacity: 0 }`</TableCell>\r\n      <TableCell>Animation state when exiting or array of states. If array is provided, states will be mapped to text segments cyclically.</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>animatePresenceMode</TableCell>\r\n      <TableCell>`AnimatePresenceProps[\"mode\"]`</TableCell>\r\n      <TableCell>`\"wait\"`</TableCell>\r\n      <TableCell>The mode for the AnimatePresence component. Refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>animatePresenceInitial</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Whether to animate in the initial state for AnimatePresence. Refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>rotationInterval</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`2000`</TableCell>\r\n      <TableCell>The interval in milliseconds between each rotation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`ValueAnimationTransition`</TableCell>\r\n      <TableCell>`{ type: \"spring\", damping: 25, stiffness: 300 }`</TableCell>\r\n      <TableCell>Animation configuration for each letter. Refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerDuration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>Delay between each letter's animation start</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerFrom</TableCell>\r\n      <TableCell>`\"first\" | \"last\" | \"center\" | \"random\" | number`</TableCell>\r\n      <TableCell>`\"first\"`</TableCell>\r\n      <TableCell>Starting index of the stagger effect</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>loop</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to loop through the texts</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>auto</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to start the animation automatically</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>splitBy</TableCell>\r\n      <TableCell>`\"words\" | \"characters\" | \"lines\" | string`</TableCell>\r\n      <TableCell>`\"words\"`</TableCell>\r\n      <TableCell>The split method for the text</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onNext</TableCell>\r\n      <TableCell>`(index: number) => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for when the next text is rendered</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>mainClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling the container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>splitLevelClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling the individual words or lines</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>elementLevelClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling the individual characters/words/lines</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n### TextRotateRef\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Method</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>next()</TableCell>\r\n      <TableCell>Goes to the next text</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>previous()</TableCell>\r\n      <TableCell>Goes back to the previous text</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>jumpTo(index: number)</TableCell>\r\n      <TableCell>Jumps to a specific text index</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>reset()</TableCell>\r\n      <TableCell>Resets the animation to the initial state</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n"
    },
    {
      "slug": "components/text/typewriter",
      "title": "Typewriter",
      "description": "A component that types out a text, one letter at a time.",
      "content": "\r\n\r\n<ComponentPreview name=\"typewriter-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\" aria-label=\"CLI\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\" aria-label=\"Manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/typewriter.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"typewriter\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nAs a text, either a string or an array of strings can be passed to the component. The component will automatically split the text into an array of characters, and animate each letter one by one. If you pass an array of strings, the component will animate one text, delete it, then continue animating the next one. The component will loop through the texts if you set the `loop` prop to `true`.\r\n\r\nThe cursor at the end of the text is optional. You can use a character or even a svg node if you like. There is a prop to customize the cursor animation, where you have to define the two motion variants as `initial` and `animate`.\r\n\r\nIdeally, the component should respect multiple lines. If you experience otherwise, please let me know.:)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>text<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string | string[]`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Text or array of texts to type out</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`\"div\"`</TableCell>\r\n      <TableCell>HTML Tag to render the component as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>speed</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`50`</TableCell>\r\n      <TableCell>Speed of typing in milliseconds</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>initialDelay</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0`</TableCell>\r\n      <TableCell>Initial delay before typing starts</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>waitTime</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`2000`</TableCell>\r\n      <TableCell>Time to wait between typing and deleting</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>deleteSpeed</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`30`</TableCell>\r\n      <TableCell>Speed of deleting characters</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>loop</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to loop through texts array</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Optional class name for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>showCursor</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to show the cursor</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>hideCursorOnType</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`false`</TableCell>\r\n      <TableCell>Hide cursor while typing</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>cursorChar</TableCell>\r\n      <TableCell>`string | React.ReactNode`</TableCell>\r\n      <TableCell>`\"|\"`</TableCell>\r\n      <TableCell>Character or React node to use as cursor</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>cursorAnimationVariants</TableCell>\r\n      <TableCell>`{ initial: Variants[\"initial\"]; animate: Variants[\"animate\"] }`</TableCell>\r\n      <TableCell>See description</TableCell>\r\n      <TableCell>Animation variants for cursor. Default: `{ initial: { opacity: 0 }, animate: { opacity: 1, transition: { duration: 0.01, repeat: Infinity, repeatDelay: 0.4, repeatType: \"reverse\" } } }`</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>cursorClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`\"ml-1\"`</TableCell>\r\n      <TableCell>Optional class name for cursor styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/underline-animation",
      "title": "Underline Animation",
      "description": "A component that animates a text underline.",
      "content": "\r\n\r\n<ComponentPreview name=\"underline-demo\" />\r\n\r\n## Installation\r\n\r\n### From center\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/underline-center.json&quot;\" npx />\r\n\r\n</TabsContent>  \r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"underline-center\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n### From side to side (comes in, goes out)\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/underline-comes-in-goes-out.json&quot;\" npx />\r\n\r\n</TabsContent>  \r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"underline-comes-in-goes-out\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n### From side to side (goes out, comes in)\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/underline-goes-out-comes-in.json&quot;\" npx />\r\n\r\n</TabsContent>  \r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"underline-goes-out-comes-in\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\nThese underline animations work differently from typical CSS underline animations. Instead of animating the CSS `text-decoration-line: underline` property, they create a separate `div` element positioned absolutely below the text. This div acts as the underline and its dimensions are calculated relative to the font size:\r\n\r\n- The height is controlled by `underlineHeightRatio` (defaults to 10% of font size)\r\n- The padding below text is controlled by `underlinePaddingRatio` (defaults to 1% of font size)\r\n\r\nThe three variants work as follows:\r\n\r\n- **Center**: The underline grows outward from the center point\r\n- **Comes In Goes Out**: The underline enters from one side, then exits from the other side\r\n- **Goes Out Comes In**: The underline exits from one side, then re-enters from the opposite side\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>\r\n        children<span className=\"text-red-500\">*</span>\r\n      </TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed and underlined</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`\"span\"`</TableCell>\r\n      <TableCell>The HTML element to render the component as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>\r\n        direction <br />\r\n        <b>(only for side-to-side variants)</b>\r\n      </TableCell>\r\n      <TableCell>`\"left\" | \"right\"`</TableCell>\r\n      <TableCell>`\"left\"`</TableCell>\r\n      <TableCell>The direction of the underline animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onClick</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>Callback function when the text is clicked</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>underlineHeightRatio</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.1`</TableCell>\r\n      <TableCell>Height of the underline as a ratio of the font size</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>underlinePaddingRatio</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.01`</TableCell>\r\n      <TableCell>Padding below the text as a ratio of the font size</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`ValueAnimationTransition`</TableCell>\r\n      <TableCell>Varies by variant</TableCell>\r\n      <TableCell>\r\n        Animation configuration, refer to motion docs for more details\r\n      </TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/underline-to-background",
      "title": "Underline To Background",
      "description": "A text component that animates a text underline into a text background.",
      "content": "\r\n\r\n<ComponentPreview name=\"underline-to-background-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/underline-to-background.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<ComponentSource name=\"underline-to-background\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\nThe component creates a separate `div` element positioned absolutely below the text (instead of the regular underline elements with CSS pseudo-elements). It animates the height from a thin line (controlled by `underlineHeightRatio`) to cover the full text height, effectively becoming a background. Simultaneously, it transitions the text color to maintain contrast against the expanding background.\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The content to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`\"span\"`</TableCell>\r\n      <TableCell>HTML Tag to render the component as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`undefined`</TableCell>\r\n      <TableCell>Optional class name for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`ValueAnimationTransition`</TableCell>\r\n      <TableCell>`{ type: \"spring\", damping: 30, stiffness: 300 }`</TableCell>\r\n      <TableCell>Animation transition configuration</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>targetTextColor<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>`\"#fef\"`</TableCell>\r\n      <TableCell>The color that the text will animate to on hover</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>underlineHeightRatio</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.1`</TableCell>\r\n      <TableCell>Height of the underline as a ratio of font size</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>underlinePaddingRatio</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.01`</TableCell>\r\n      <TableCell>Padding of the underline as a ratio of font size</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/variable-font-and-cursor",
      "title": "Variable Font And Cursor",
      "description": "A text component that animates the font variation settings based on the cursor position. Works only with variable fonts.",
      "content": "\r\n\r\n<ComponentPreview name=\"variable-font-and-cursor-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\" aria-label=\"CLI\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\" aria-label=\"Manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/variable-font-and-cursor.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\nCreate this hook to query the cursor position's ref:\r\n\r\n<ComponentSource name=\"use-mouse-position-ref\" />\r\n\r\nThen, copy and paste the following code into your project:\r\n\r\n<ComponentSource name=\"variable-font-and-cursor\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Usage\r\n\r\nThe `VariableFontAndCursor` component allows you to create text that responds to cursor movement by adjusting its font variation settings. This component works with variable fonts and can track cursor movement either within a specific container or across the entire viewport.\r\n\r\nIt's important to note that the container used for tracking mouse position is not part of the component itself. To track mouse movement within a specific area, you need to create a container element, assign it a ref, and pass that ref to the component using the `containerRef` prop. You can use the window object as a reference to the entire viewport.\r\n\r\n### Font Variation Mapping\r\n\r\nThe `fontVariationMapping` prop allows you to define how cursor position maps to font variation settings. It has the following structure:\r\n\r\n<CodeSnippet title=\"Font variation mapping settings\">\r\n```tsx\r\ninterface FontVariationMapping {\r\n  x: { name: string; min: number; max: number };\r\n  y: { name: string; min: number; max: number };\r\n}\r\n```\r\n</CodeSnippet>\r\n\r\n- `x`: Defines the font variation axis controlled by horizontal cursor movement.\r\n- `y`: Defines the font variation axis controlled by vertical cursor movement.\r\n- `name`: The name of the font variation axis (e.g., \"wght\" for weight, \"slnt\" for slant, see next section for more details).\r\n- `min`: The minimum value for the axis, applied when the cursor is at the left/top.\r\n- `max`: The maximum value for the axis, applied when the cursor is at the right/bottom.\r\n\r\nThe component interpolates between `min` and `max` based on the cursor position within the tracking area.\r\n\r\n### Understanding Variable Fonts\r\n\r\nFor more information about variable fonts and how they work, please refer to the <Link href=\"/docs/components/text/variable-font-hover-by-letter#understanding-variable-fonts\">Variable Font Hover By Letter</Link> documentation.\r\n\r\n## Notes\r\n\r\nMake sure the main container has enough space to hold the text at its full weight to avoid layout shifts. For example, you can use negative margins, or an invisible pseudo element.\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.ReactNode`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text content to display and animate</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>as</TableCell>\r\n      <TableCell>`ElementType`</TableCell>\r\n      <TableCell>`\"span\"`</TableCell>\r\n      <TableCell>HTML tag to render the component as</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>fontVariationMapping<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`FontVariationMapping`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Mapping of cursor position to font variation settings</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>containerRef<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.RefObject<HTMLDivElement>`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Reference to the container for mouse tracking</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n## Interfaces\r\n\r\n### FontVariationMapping\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Property</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>x</TableCell>\r\n      <TableCell>`FontVariationAxis`</TableCell>\r\n      <TableCell>\r\n        Font variation settings for horizontal cursor movement\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>y</TableCell>\r\n      <TableCell>`FontVariationAxis`</TableCell>\r\n      <TableCell>\r\n        Font variation settings for vertical cursor movement\r\n      </TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n\r\n### FontVariationAxis\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Property</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>name</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>\r\n        Name of the font variation axis (e.g., \"wght\", \"slnt\")\r\n      </TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>min</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>Minimum value for the axis</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>max</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>Maximum value for the axis</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/variable-font-cursor-proximity",
      "title": "Variable Font Cursor Proximity",
      "description": "A text component that animates the font variation settings of letters based on the cursor proximity. Works only with variable fonts.",
      "content": "\r\n\r\n<ComponentPreview name=\"variable-font-cursor-proximity-demo\" framerLink=\"https://framer.university/resources/text-magnifier-component-for-framer\" />\r\n\r\nA generalized version of this component (where you can control any CSS property) is available in the <Link href=\"/docs/components/text/text-cursor-proximity\">Text Cursor Proximity</Link> component.\r\n\r\n## Installation \r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/variable-font-cursor-proximity.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n\r\nCreate a hook for querying the cursor/mouse position.\r\n\r\n<ComponentSource name=\"use-mouse-position-ref\" />\r\n\r\nThis hook actually returns a ref to the position (instead of a state), so we can avoid re-renders when the cursor moves.\r\n\r\nThen, copy and paste the component source code into your project:\r\n\r\n<ComponentSource name=\"variable-font-cursor-proximity\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\nThe `VariableFontCursorProximity` splits its text into letters, that respond to cursor movement by adjusting their font variation settings, based on the distance between the letter and cursor distance. This component works only with variable fonts.\r\n\r\n1. Splitting text into individual letters\r\n2. Tracking cursor position relative to each letter\r\n3. Smoothly transitioning font variations based on proximity\r\n4. Supporting multiple falloff patterns for the effect\r\n\r\nThis component requires the use of variable fonts to function properly. Otherwise it will not work.\r\n\r\n### How it works\r\n\r\nThe component calculates the distance between the cursor and each letter in real-time. When the cursor comes within the specified `radius` of a letter, that letter's font variations (like weight, slant, etc.) smoothly interpolate between two states:\r\n\r\n- The default state (`fromFontVariationSettings`)\r\n- The target state (`toFontVariationSettings`)\r\n\r\nThe closer the cursor gets to a letter, the closer that letter moves toward its target state.\r\n\r\n### Understanding Variable Fonts\r\n\r\nFor more information about variable fonts and how they work, please refer to the <Link href=\"/docs/components/text/variable-font-hover-by-letter#understanding-variable-fonts\">Variable Font Hover By Letter</Link> documentation.\r\n\r\n## Examples\r\n\r\n### Falloff\r\n\r\nWith the `falloff` prop, you can control the type of falloff. It can be either `linear`, `exponential`, or `gaussian`. The following demo showcases the `exponential` one. The effects are best observed on a larger block of text.\r\n\r\n<ComponentPreview name=\"variable-font-cursor-proximity-falloff-demo\" />\r\n\r\n## Notes\r\n\r\n- Interpolating on large number of letters simultaneously can be a bit slow, even when we're avoiding re-renders with state updates. If you're experienceing performance issues, try to limit the length of the text you're animating.\r\n\r\n- Make sure the main container has enough space to hold the text at its full weight to avoid layout shifts. For example, you can use negative margins like in the 2nd example.\r\n\r\n## Credits\r\n\r\nPorted to Framer by [Framer University](https://framer.university/)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>label<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>fromFontVariationSettings<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Default font variation settings</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>toFontVariationSettings<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Target font variation settings</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>containerRef<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`React.RefObject<HTMLDivElement>`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Reference to the container for mouse tracking</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>radius</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`50`</TableCell>\r\n      <TableCell>The radius of the proximity effect</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>falloff</TableCell>\r\n      <TableCell>`\"linear\" | \"exponential\" | \"gaussian\"`</TableCell>\r\n      <TableCell>`\"linear\"`</TableCell>\r\n      <TableCell>The falloff type of the proximity</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/variable-font-hover-by-letter",
      "title": "Variable Font Hover By Letter",
      "description": "A text component that animates the font variation settings of letters. Works only with variable fonts.",
      "content": "\r\n\r\n<ComponentPreview name=\"variable-font-hover-by-letter-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\" aria-label=\"CLI\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\" aria-label=\"Manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/variable-font-hover-by-letter.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n\r\nInstall the following dependencies:\r\n\r\n<InstallTabs command=\"lodash\" />\r\n\r\nlodash is used for debouncing here — so the animation doesn't break on rapid hover changes.\r\n\r\nThen, copy and paste the following code into your project:\r\n\r\n<ComponentSource name=\"variable-font-hover-by-letter\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding Variable Fonts\r\n\r\nThis component is designed to work exclusively with variable fonts. Variable fonts are a modern font technology that allows a single font file to contain multiple variations of a typeface — these variations can be adjusted along different axes, such as weight, width, or slant, etc.\r\n\r\nEach axis in a variable font has a minimum and maximum value, and you can interpolate between these values to create custom styles. Common axes include:\r\n\r\n- Weight (`wght`): Controls the thickness of the letterforms (usually ranges from 100 to 900)\r\n- Width (`wdth`): Controls the width of the letterforms\r\n- Slant (`slnt`): Changes the angle of the letterforms\r\n- Italic (`ital`): Also controls the slant of the letterforms\r\n- Optical Size (`opsz`): Controls the size of the letterforms\r\n\r\nThese 5 axes are actually standardized, so when a font have them, they will have the names above. But, a font can have limitless custom axes too, with completely arbitrary names.\r\n\r\nIn this component, the `fromFontVariationSettings` and `toFontVariationSettings` props define the starting and ending states of the font variation. For example, using the [Overused Grotesk](https://github.com/RandomMaerks/Overused-Grotesk) font (which we use in this demo), we can modify the 'slnt' (slant) and 'wght' (weight) axes:\r\n\r\n- The `slnt` axis ranges from 0 (up) to -10 (upright)\r\n- The `wght` axis ranges from 100 (thin) to 900 (black)\r\n\r\nAn example prop therefore would be:\r\n\r\n<CodeSnippet>\r\n```jsx\r\n`fromFontVariationSettings=\"'wght' 100, 'slnt' 0\"`\r\n```\r\n</CodeSnippet>\r\n\r\n**Always check the font's documentation to see what are the available axes and their ranges.**\r\n\r\nImportant to mention that older browser versions and various environments don't support variable fonts, so make sure to check compatibility.\r\n\r\n## Resources\r\n\r\nI highly recommend to go down the rabbit hole, it's super fun :)\r\n\r\n- [MDN Web Docs for Variable fonts](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_fonts/Variable_fonts_guide)\r\n- [Super cool article by ABC Dinamo](https://abcdinamo.com/news/using-variable-fonts-on-the-web)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>label<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>fromFontVariationSettings<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Initial font variation settings</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>toFontVariationSettings<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Target font variation settings on hover</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`AnimationOptions`</TableCell>\r\n      <TableCell>`{ type: \"spring\", duration: 0.7 }`</TableCell>\r\n      <TableCell>Transition settings for the animation. Refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerDuration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.03`</TableCell>\r\n      <TableCell>Delay between each letter's animation start</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerFrom</TableCell>\r\n      <TableCell>`\"first\" | \"last\" | \"center\" | number`</TableCell>\r\n      <TableCell>`\"first\"`</TableCell>\r\n      <TableCell>Starting point of the stagger effect. Number is the index of the letter where the stagger animation starts</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onClick</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for click events</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/variable-font-hover-by-random-letter",
      "title": "Variable Font Hover By Random Letter",
      "description": "A text component that animates the font variation settings of letters in a random order. Works only with variable fonts.",
      "content": "\r\n\r\n<ComponentPreview name=\"variable-font-hover-by-random-letter-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/variable-font-hover-by-random-letter.json&quot;\" npx />\r\n\r\n</TabsContent>  \r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"variable-font-hover-by-random-letter\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding Variable Fonts\r\n\r\nThis component is designed to work exclusively with variable fonts. Variable fonts are a modern font technology that allows a single font file to contain multiple variations of a typeface — these variations can be adjusted along different axes, such as weight, width, or slant, etc.\r\n\r\nEach axis in a variable font has a minimum and maximum value, and you can interpolate between these values to create custom styles. Common axes include:\r\n\r\n- Weight (`wght`): Controls the thickness of the letterforms (usually ranges from 100 to 900)\r\n- Width (`wdth`): Controls the width of the letterforms\r\n- Slant (`slnt`): Changes the angle of the letterforms\r\n- Italic (`ital`): Also controls the slant of the letterforms\r\n- Optical Size (`opsz`): Controls the size of the letterforms\r\n\r\nThese 5 axes are actually standardized, so when a font have them, they will have the names above. But, a font can have limitless custom axes too, with completely arbitrary names.\r\n\r\nIn this component, the `fromFontVariationSettings` and `toFontVariationSettings` props define the starting and ending states of the font variation. For example, using the [Overused Grotesk](https://github.com/RandomMaerks/Overused-Grotesk) font (which we use in this demo), we can modify the 'slnt' (slant) and 'wght' (weight) axes:\r\n\r\n- The `slnt` axis ranges from 0 (up) to -10 (upright)\r\n- The `wght` axis ranges from 100 (thin) to 900 (black)\r\n\r\nAn example prop therefore would be:\r\n\r\n<CodeSnippet title=\"Font variation example prop\">\r\n```jsx\r\n  fromFontVariationSettings=\"'wght' 100, 'slnt' 0\"\r\n```\r\n</CodeSnippet>\r\n\r\n**Always check the font's documentation to see what are the available axes and their ranges.**\r\n\r\nImportant to mention that older browsers versions and various environemnts don't support variable fonts, so make sure to check compatibility.\r\n\r\n## Resources\r\n\r\nI highly recommend to go down the rabbit hole, it's super fun :)\r\n\r\n- [MDN Web Docs for Variable fonts](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_fonts/Variable_fonts_guide)\r\n- [Super cool article by ABC Dinamo](https://abcdinamo.com/news/using-variable-fonts-on-the-web)\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>label<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>fromFontVariationSettings<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Initial font variation settings</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>toFontVariationSettings<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Target font variation settings on hover</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>className</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`Transition`</TableCell>\r\n      <TableCell>`{ type: \"spring\", duration: 0.7 }`</TableCell>\r\n      <TableCell>Transition settings for the animation. Refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerDuration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.03`</TableCell>\r\n      <TableCell>Delay between each letter's animation start</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onClick</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for click events</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "components/text/vertical-cut-reveal",
      "title": "Vertical Cut Reveal",
      "description": "A text component that reveals the text with a cut reveal effect.",
      "content": "\r\n\r\n<ComponentPreview name=\"vertical-cut-reveal-demo\" />\r\n\r\n## Installation\r\n\r\n<Tabs defaultValue=\"cli\">\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/vertical-cut-reveal.json&quot;\" npx />\r\n\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n\r\n<ComponentSource name=\"vertical-cut-reveal\" />\r\n\r\n</TabsContent>\r\n</Tabs>\r\n\r\n## Understanding the component\r\n\r\n1. First, the text is split into smaller pieces based on the `splitBy` prop:\r\n\r\n   - `words`: Splits into individual words (e.g., \"Hello world\" → [\"Hello\", \"world\"])\r\n   - `characters`: Splits into individual characters (e.g., \"Hi\" → [\"H\", \"i\"])\r\n   - `lines`: Splits by newline characters (`\\n`)\r\n   - `string`: Splits by any custom string delimiter\r\n\r\n2. Each piece of text is wrapped in two `<span>` elements:\r\n\r\n   - An outer `<span>` that acts as a container with its position to `relative` and its overflow to `overflow-hidden`\r\n   - An inner `<span>` that holds the actual text, initially positioned off-screen using `y: 100` (or `-100` if `reverse` is true)\r\n\r\n3. When the animation starts:\r\n   - The inner `<span>` elements smoothly transition from their off-screen position (`y: 100`) to their final position (`y: 0`)\r\n   - This creates a \"cutting\" or \"revealing\" effect as each piece of text slides into view\r\n   - The animation can be staggered from different directions (first, last, center, or random) using the `staggerFrom` prop\r\n\r\nA key implementation detail is that the component always maintains word boundaries, even when splitting by characters. There are two reason for this:\r\n\r\n1. When dealing with multi-line text, each line maintains its own reveal animation starting point. This means if you have text that spans multiple lines, each line will animate independently from its own baseline, rather than all elements animating from a single point (like the bottom of the entire paragraph).\r\n2. When using `characters` mode, characters from the same word stay together in a word container. This prevents unwanted line breaks in the middle of words - if a word needs to wrap to the next line, it will wrap as a complete unit rather than having some characters on one line and others on the next line. This maintains proper text flow and readability while still allowing character-by-character animation within each word.\r\n\r\n## Examples\r\n\r\n### splitBy variations\r\n\r\nWith the `splitBy` prop, you can control how the text is split into smaller pieces. It can be either `words`, `characters`, `lines`, or a custom `string` delimiter.\r\n\r\n<ComponentPreview name=\"vertical-cut-reveal-line-demo\" />\r\n\r\n<ComponentPreview name=\"vertical-cut-reveal-word-demo\" />\r\n\r\n### staggerFrom variations\r\n\r\nWith the `staggerFrom` prop, you can control the starting index of the animation. It can be either `first`, `last`, `center`, a `number` (custom index).\r\n\r\n<ComponentPreview name=\"vertical-cut-reveal-stagger-demo\" />\r\n\r\nOr you can use the `random` option, which will animate the elements in a random order. You can see the multiline text in action here too:\r\n\r\n<ComponentPreview name=\"vertical-cut-reveal-letter-random-demo\" />\r\n\r\n### No auto start\r\n\r\nIf you don't want the animation to start automatically, you can set the `autoStart` prop to `false`. In this case, you can call the `startAnimation` method exposed via a ref to start the animation manually. Here is an example demonstrating how to do this when the component is inside the viewport (with the `useInView` hook from framer motion):\r\n\r\n<ComponentPreview name=\"vertical-cut-reveal-scroll-demo\" />\r\n\r\n## Notes\r\n\r\nSince each element is \"cutted\" because of the `overflow-hidden` property, with some fonts and font-families (eg italic), parts of the letter may be cutoff. That's why you can use the `containerClassName` prop to style the container element, the `worldLeterLevelClassName` prop to style word level container, and the `elementLevelClassName` prop to style the individual split elements. You can add padding for example to accomodate more space for the text.\r\n\r\n## Props\r\n\r\n<Table>\r\n  <TableHeader>\r\n    <TableRow>\r\n      <TableHead>Prop</TableHead>\r\n      <TableHead>Type</TableHead>\r\n      <TableHead>Default</TableHead>\r\n      <TableHead>Description</TableHead>\r\n    </TableRow>\r\n  </TableHeader>\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>children<span className=\"text-red-500\">*</span></TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>The text to be displayed and animated</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>reverse</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Direction of the animation (true: bottom to top, false: top to bottom)</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>transition</TableCell>\r\n      <TableCell>`AnimationOptions`</TableCell>\r\n      <TableCell>`{ type: \"spring\", damping: 30, stiffness: 300 }`</TableCell>\r\n      <TableCell>Animation configuration for each element. Refer to motion docs for more details</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>splitBy</TableCell>\r\n      <TableCell>`\"words\" | \"characters\" | \"lines\" | string`</TableCell>\r\n      <TableCell>`\"words\"`</TableCell>\r\n      <TableCell>The split method for the text</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerDuration</TableCell>\r\n      <TableCell>`number`</TableCell>\r\n      <TableCell>`0.2`</TableCell>\r\n      <TableCell>Delay between each element's animation start</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>staggerFrom</TableCell>\r\n      <TableCell>`\"first\" | \"last\" | \"center\" | \"random\" | number`</TableCell>\r\n      <TableCell>`\"first\"`</TableCell>\r\n      <TableCell>Starting index of the animation</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>containerClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling the container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>wordLevelClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling the word level container</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>elementLevelClassName</TableCell>\r\n      <TableCell>`string`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Additional CSS classes for styling the individual elements</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onClick</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for click events</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onStart</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for when the animation starts</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>onComplete</TableCell>\r\n      <TableCell>`() => void`</TableCell>\r\n      <TableCell>-</TableCell>\r\n      <TableCell>Callback function for when the animation completes</TableCell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <TableCell>autoStart</TableCell>\r\n      <TableCell>`boolean`</TableCell>\r\n      <TableCell>`true`</TableCell>\r\n      <TableCell>Whether to start the animation automatically</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>\r\n"
    },
    {
      "slug": "installation",
      "title": "Installation",
      "description": "---",
      "content": "\r\n\r\nThe components are built with React, TypeScript, Tailwind CSS, and mainly with Motion (formerly Framer Motion).\r\nIn order to use the components, you need to install the following dependencies:\r\n\r\n<InstallTabs command=\"tailwindcss@latest motion\" />\r\n\r\nOr follow the [Tailwind CSS installation guide](https://tailwindcss.com/docs/installation) to setup Tailwind CSS in your project.\r\n\r\nSome components uses other libraries too, in each case, you can find the installation instructions in the component's documentation.\r\n\r\n## Adding a component\r\n\r\nYou have two options to add a component to your project:\r\n\r\n1. Using the CLI\r\n2. Manually\r\n\r\n### Using the CLI\r\n\r\nTo add a component using the CLI, you need to run the following command in your terminal:\r\n\r\n<InstallTabs command=\"shadcn@latest add &quot;https://fancycomponents.dev/r/component-name.json&quot;\" npx />\r\n\r\nThis will add the component source code and its dependencies in your project. You can then import the component in your code and start using it. \r\n\r\n**Important note:** as of now, additional dependencies aren't installed automatically, they just get added to the `package.json` file. You need to run `npm install` or the equivalent command in your preferred package manager to install them.\r\n\r\nThe appropriate link is available in the \"Installation\" section of each component's documentation page.\r\n\r\n### Manually\r\n\r\nGo to any of the components you want to use and copy the source code(s) from the \"Installation\" section. Make sure to update your imports accordingly. \r\n\r\n## Notes\r\n\r\nIf you prefer javascript instead of typescript, you can easily convert the code with a tool like [this](https://transform.tools/typescript-to-javascript).\r\n"
    },
    {
      "slug": "introduction",
      "title": "Introduction",
      "description": "A curated collection of playful, composable UI components and microinteractions for React projects.",
      "content": "\r\n\r\nSesame is a curated collection of playful, polished UI components and microinteractions you can drop into your React projects.\r\n\r\nBuilt with modern web tooling, these pieces are designed to be approachable, composable, and a little unexpected. Use them as-is, remix them, or treat them as inspiration for your own UI experiments.\r\n\r\nCore technologies\r\n\r\n- React\r\n- TypeScript\r\n- Tailwind CSS\r\n- Motion (Framer Motion)\r\n\r\n## Why Sesame?\r\n\r\nThe web often favors safe, predictable UI patterns — which is great for usability, but it can make interfaces feel samey. Sesame exists to nudge design in a different direction: playful, tactile, and occasionally delightfully strange. Each component focuses on a small, well-scoped interaction that adds personality without sacrificing accessibility or maintainability.\r\n\r\n## How to use\r\n\r\nStart by visiting the <Link href=\"/docs/installation\">Installation</Link> guide to add Sesame to your project. Each component includes usage notes, props/type definitions, and small examples to help you get started quickly.\r\n\r\n## Open source and contributions\r\n\r\nSesame is open source and free for personal and commercial use. Contributions, bug reports, and new ideas are very welcome — see the contribution guide for details on submitting PRs and issues.\r\n\r\n## Design Inspo / Shoutouts\r\n\r\nThis collection was assembled from techniques and visual ideas spotted across the web. Big thanks and shoutouts to the designers and sites that inspired specific components and interactions — their work helped shape the playful spirit of Sesame.\r\n\r\n- [sesame Components](https://fancycomponents.dev) — a platform for learning about Framer and its capabilities.\r\n- [Tweakcn](https://tweakcn.com) — creative UI experiments and landing-page ideas that influenced layout and\r\n  motion choices.\r\n\r\nIf one of your projects inspired a component here and you'd like credit or a mention, please open an issue or a PR — we love to acknowledge original creators.\r\n\r\n---\r\n\r\nHappy building — and enjoy adding a little sesame to your UI.\r\n"
    }
  ],
  "components": [
    {
      "name": "animated-gradient-svg",
      "category": "background"
    },
    {
      "name": "pixel-trail",
      "category": "background"
    },
    {
      "name": "circling-elements",
      "category": "blocks"
    },
    {
      "name": "css-box",
      "category": "blocks"
    },
    {
      "name": "drag-elements",
      "category": "blocks"
    },
    {
      "name": "float",
      "category": "blocks"
    },
    {
      "name": "marquee-along-svg-path",
      "category": "blocks"
    },
    {
      "name": "media-between-text",
      "category": "blocks"
    },
    {
      "name": "screensaver",
      "category": "blocks"
    },
    {
      "name": "simple-marquee",
      "category": "blocks"
    },
    {
      "name": "stacking-cards",
      "category": "blocks"
    },
    {
      "name": "sticky-footer",
      "category": "blocks"
    },
    {
      "name": "box-carousel",
      "category": "carousel"
    },
    {
      "name": "gooey-svg-filter",
      "category": "filter"
    },
    {
      "name": "pixelate-svg-filter",
      "category": "filter"
    },
    {
      "name": "image-trail",
      "category": "image"
    },
    {
      "name": "parallax-floating",
      "category": "image"
    },
    {
      "name": "cursor-attractor-and-gravity",
      "category": "physics"
    },
    {
      "name": "elastic-line",
      "category": "physics"
    },
    {
      "name": "gravity",
      "category": "physics"
    },
    {
      "name": "basic-number-ticker",
      "category": "text"
    },
    {
      "name": "breathing-text",
      "category": "text"
    },
    {
      "name": "letter-3d-swap",
      "category": "text"
    },
    {
      "name": "letter-swap",
      "category": "text"
    },
    {
      "name": "random-letter-swap",
      "category": "text"
    },
    {
      "name": "scramble-hover",
      "category": "text"
    },
    {
      "name": "scramble-in",
      "category": "text"
    },
    {
      "name": "scroll-and-swap",
      "category": "text"
    },
    {
      "name": "text-along-path",
      "category": "text"
    },
    {
      "name": "text-cursor-proximity",
      "category": "text"
    },
    {
      "name": "text-highlighter",
      "category": "text"
    },
    {
      "name": "text-rotate",
      "category": "text"
    },
    {
      "name": "typewriter",
      "category": "text"
    },
    {
      "name": "underline-animation",
      "category": "text"
    },
    {
      "name": "underline-to-background",
      "category": "text"
    },
    {
      "name": "variable-font-and-cursor",
      "category": "text"
    },
    {
      "name": "variable-font-cursor-proximity",
      "category": "text"
    },
    {
      "name": "variable-font-hover-by-letter",
      "category": "text"
    },
    {
      "name": "variable-font-hover-by-random-letter",
      "category": "text"
    },
    {
      "name": "vertical-cut-reveal",
      "category": "text"
    }
  ]
}